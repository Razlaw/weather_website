{"version":3,"sources":["assets/magnifying_glass.svg","components/citySearchBar/CitySearchBar.jsx","components/hourOfDayListItem/HourOfDayListItem.jsx","components/plotForADay/PlotForADay.jsx","components/weatherForecastForADay/WeatherForecastForADay.jsx","components/weatherForecastForAWeek/WeatherForecastForAWeek.jsx","utils.jsx","data.jsx","App.jsx","index.js"],"names":["_g","_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgMagnifyingGlass","_ref","svgRef","title","titleId","props","id","width","height","viewBox","xmlns","ref","stroke","cx","cy","rx","ry","fill","strokeLinecap","strokeLinejoin","strokeWidth","d","ForwardRef","CitySearchBar","cityName","updateCityName","reloadWeather","className","onSubmit","onKeyUp","e","blur","onChange","value","placeholder","type","autoFocus","HourOfDayListItem","time","active","sunrise","sunset","PlotForADay","currentHour","weatherData","dataKey","plotKey","unit","decimalPrecision","ResponsiveContainer","BarChart","layout","data","margin","top","left","right","bottom","XAxis","hide","domain","Bar","barSize","background","isAnimationActive","LabelList","position","formatter","entry","toFixed","map","index","Cell","radius","WeatherForecastForADay","dayId","hourOfSunrise","hourOfSunset","dayToDisplay","useState","currentSlide","setCurrentSlide","touchStartPosition","useRef","touchEndPosition","scrollOnVerticalSwipe","swipeVectorX","current","swipeVectorY","isSwipingHorizontally","Math","abs","isSwipingRight","onTouchStart","touchStartEvent","targetTouches","clientX","clientY","onTouchMove","touchMoveEvent","onTouchEnd","onMouseDown","mouseDownEvent","preventDefault","onMouseMove","mouseMoveEvent","onMouseUp","Array","x","hourOfDay","style","transform","WeatherForecastForAWeek","href","utcTimeFromUTCUnix","unixUTCTimeInSeconds","dateUTC","Date","hoursUTC","getUTCHours","minutesUTC","getUTCMinutes","toString","secondsUTC","getUTCSeconds","getWindowInnerHeight","window","innerHeight","getWeatherData","a","axios","get","process","currentWeather","lat","coord","lon","currentUnixTimeUTC","dt","currentUnixTimeInCity","timezone","todaysHistoricalWeather","hoursInTwoDays","hourlyWeatherForTwoDays","dateInCity","hoursToFillWithHistoricalData","hoursOfHistoricalDataAvailable","hourly","yesterdayUnixTimeUTC","yesterdaysHistoricalWeather","hoursToFillWithYesterdaysData","console","assert","startIndexYesterday","push","round","temp","wind_deg","wind_speed","clouds","weather","rain","snow","hoursAlreadyFilled","nextDaysForecast","numberOfEntriesToFill","startIndex","endIndex","roundedTemperatureArray","lowestTemperature","min","temperatureArrayForPlot","indexForPlotData","utcNow","now","nowInTimezone","dateInTimezone","sunriseInTimezone","daily","sunsetInTimezone","Promise","resolve","log","reject","Error","App","maxWindowInnerHeight","setMaxWindowInnerHeight","useEffect","handleResize","currentWindowInnerHeight","addEventListener","removeEventListener","MaxWindowInnerHeight","numberOfSlides","maxSlideId","max","currentSlideId","isAwaitingScroll","touchCurrentPosition","isSwipingVertically","isSwipingDown","VerticalScrollSnap","handleTouchStart","useCookies","cookies","setCookie","removeCookie","updateWeatherData","triedToFetchData","fetchWeather","localWeatherData","path","secure","sameSite","maxAge","minHeight","undefined","slice","ReactDOM","render","CookiesProvider","document","getElementById"],"mappings":"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","file":"static/js/main.b1742f08.chunk.js","sourcesContent":["var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgMagnifyingGlass(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"SVGRoot\",\n    width: \"16px\",\n    height: \"16px\",\n    viewBox: \"0 0 16 16\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    stroke: \"#000\"\n  }, /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 5.6727,\n    cy: 5.7476,\n    rx: 3.0967,\n    ry: 3.1013,\n    fill: \"none\",\n    strokeLinecap: \"square\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 1.7101\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m9.2387 9.2405 3.7161 3.7215\",\n    fill: \"none\",\n    strokeWidth: 1.6549\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m9.2387 10.481-1.2387-2.481 2.4774 1.2405z\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 0.46851\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgMagnifyingGlass);\nexport default __webpack_public_path__ + \"static/media/magnifying_glass.7b20c50e.svg\";\nexport { ForwardRef as ReactComponent };","import \"./citySearchBar.scss\";\r\nimport {ReactComponent as MagnifyingGlassIcon} from '../../assets/magnifying_glass.svg';\r\n\r\nexport default function CitySearchBar({cityName, updateCityName, reloadWeather}) {\r\n    function hideKeyboardOnEnter(e) {\r\n        if (e.key === 'Enter') {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"citySearchBar\">\r\n            <form onSubmit={reloadWeather}>\r\n                <div className=\"formComponents\">\r\n                    <input\r\n                        onKeyUp={hideKeyboardOnEnter}\r\n                        onChange={(e) => updateCityName(e.target.value)}\r\n                        placeholder={cityName === \"\" ? \"City\" : cityName}\r\n                        type=\"text\"\r\n                        id=\"cityNameInput\"\r\n                        autoFocus\r\n                    />\r\n                    <button type=\"submit\">\r\n                        <MagnifyingGlassIcon className=\"magnifyingGlassIcon\"/>\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import \"./hourOfDayListItem.scss\"\r\n\r\nexport default function HourOfDayListItem({time, active, sunrise, sunset}) {\r\n    let className = \"hourOfDayListItem\";\r\n    className = active ? className + \" active\" : className;\r\n    className = time < sunrise || time > sunset ? className + \" night\" : className + \" day\" ;\r\n    className = time === sunrise || time === sunset ? className + \" twilight\" : className;\r\n\r\n    return (\r\n        <li\r\n            className={className}\r\n        >\r\n            {time}:00\r\n        </li>\r\n    );\r\n}","import \"./plotForADay.scss\";\r\nimport React from 'react';\r\nimport {\r\n    Cell,\r\n    Bar,\r\n    XAxis,\r\n    BarChart,\r\n    ResponsiveContainer,\r\n    LabelList\r\n} from 'recharts';\r\n\r\nexport default function PlotForADay({currentHour, weatherData, dataKey, plotKey, unit, decimalPrecision = 0}) {\r\n\r\n    const renderLabel = function(entry) {\r\n        return (entry).toFixed(decimalPrecision) + unit;\r\n    }\r\n\r\n    return (\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <BarChart layout=\"vertical\" width=\"100%\" height=\"100%\" data={weatherData} margin={{\r\n                top: 20,\r\n                left: 20,\r\n                right: 20,\r\n                bottom: 0\r\n            }}>\r\n                <XAxis\r\n                    type=\"number\"\r\n                    hide={true}\r\n                    domain={[0, \"dataMax + 1\"]}\r\n                />\r\n                {/*<CartesianGrid*/}\r\n                {/*    strokeDasharray=\"19 6\"*/}\r\n                {/*    strokeDashoffset={10}*/}\r\n                {/*    stroke={'#000'}*/}\r\n                {/*    width={20}*/}\r\n                {/*/>*/}\r\n                <Bar\r\n                    dataKey={dataKey}\r\n                    barSize={18}\r\n                    background={{ fill: 'rgb(255,255,255)' }}\r\n                    isAnimationActive={false}\r\n                >\r\n                    <LabelList\r\n                        dataKey={plotKey}\r\n                        position=\"right\"\r\n                        formatter={renderLabel}\r\n                    />\r\n                    {weatherData.map((entry, index) => (\r\n                        <Cell\r\n                            className={index === currentHour ? \"barCell active\" : \"barCell\"}\r\n                            fill={index === currentHour ? '#82ca9d' : 'rgb(136,132,216)'}\r\n                            height={18}\r\n                            stroke={'#000'}\r\n                            strokeWidth={0}\r\n                            radius={[0, 5, 5 ,0]}\r\n                            key={`cell-${index}`}\r\n                        />\r\n                    ))}\r\n                </Bar>\r\n            </BarChart>\r\n        </ResponsiveContainer>\r\n    );\r\n}\r\n","import \"./weatherForecastForADay.scss\";\r\nimport HourOfDayListItem from \"../hourOfDayListItem/HourOfDayListItem\";\r\nimport React, {useRef, useState} from \"react\";\r\nimport PlotForADay from \"../plotForADay/PlotForADay\";\r\n\r\nexport default function WeatherForecastForADay({dayId, weatherData, currentHour, hourOfSunrise, hourOfSunset}) {\r\n    const dayToDisplay = dayId === 0 ? \"Today\" : \"Tomorrow\";\r\n\r\n    const [currentSlide, setCurrentSlide] = useState(0);\r\n\r\n    const touchStartPosition = useRef([0, 0]);\r\n    const touchEndPosition = useRef([0, 0]);\r\n\r\n    function setTouchStartPosition(e) {\r\n        touchStartPosition.current = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n        touchEndPosition.current = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n    }\r\n\r\n    function setMouseStartPosition(e) {\r\n        e.preventDefault();\r\n        touchStartPosition.current = [e.clientX, e.clientY];\r\n        touchEndPosition.current = [e.clientX, e.clientY];\r\n    }\r\n\r\n    function setTouchCurrentPosition(e) {\r\n        touchEndPosition.current = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n    }\r\n\r\n    function setMouseCurrentPosition(e) {\r\n        touchEndPosition.current = [e.clientX, e.clientY];\r\n    }\r\n\r\n    function scrollOnVerticalSwipe() {\r\n        const swipeVectorX = touchEndPosition.current[0] - touchStartPosition.current[0];\r\n        const swipeVectorY = touchEndPosition.current[1] - touchStartPosition.current[1];\r\n        const isSwipingHorizontally = Math.abs(swipeVectorX) > Math.abs(swipeVectorY);\r\n        const isSwipingRight = swipeVectorX > 50 && isSwipingHorizontally;\r\n        const isSwipingLeft = swipeVectorX < -50 && isSwipingHorizontally;\r\n\r\n        if (isSwipingLeft) {\r\n            setCurrentSlide(currentSlide < 3 - 1 ? currentSlide + 1 : 0);\r\n        }\r\n\r\n        if (isSwipingRight) {\r\n            setCurrentSlide(currentSlide > 0 ? currentSlide - 1 : 3 - 1)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"weatherForecastForADay\"\r\n            onTouchStart={touchStartEvent => setTouchStartPosition(touchStartEvent)}\r\n            onTouchMove={touchMoveEvent => setTouchCurrentPosition(touchMoveEvent)}\r\n            onTouchEnd={() => scrollOnVerticalSwipe()}\r\n            onMouseDown={mouseDownEvent => setMouseStartPosition(mouseDownEvent)}\r\n            onMouseMove={mouseMoveEvent => setMouseCurrentPosition(mouseMoveEvent)}\r\n            onMouseUp={() => scrollOnVerticalSwipe()}\r\n        >\r\n            <div className=\"contentContainer\">\r\n                <div className=\"dayDisplay\">\r\n                    <h1>\r\n                        {dayToDisplay}\r\n                    </h1>\r\n                </div>\r\n                <div className=\"forecast\">\r\n                    <div className=\"hoursOfDay\">\r\n                        <ul>\r\n                            {[...Array(24)].map((x, hourOfDay) =>\r\n                                <HourOfDayListItem\r\n                                    key={hourOfDay}\r\n                                    time={hourOfDay}\r\n                                    active={currentHour === hourOfDay}\r\n                                    sunrise={hourOfSunrise}\r\n                                    sunset={hourOfSunset}\r\n                                />\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"forecastPlot\">\r\n                        <div className=\"plotContainer\">\r\n                            <div className=\"temperaturePlot\" style={{transform: `rotateY(${currentSlide * 0.25}turn)`}} >\r\n                                <PlotForADay\r\n                                    currentHour={currentHour}\r\n                                    weatherData={weatherData}\r\n                                    dataKey={\"temperatureForPlot\"}\r\n                                    plotKey={\"temperature\"}\r\n                                    unit={\"°C\"}/>\r\n                            </div>\r\n                            <div className=\"windPlot\" style={{transform: `rotateY(${(currentSlide-2) * 0.25}turn)`}}>\r\n                                <PlotForADay\r\n                                    currentHour={currentHour}\r\n                                    weatherData={weatherData}\r\n                                    dataKey={\"wind_speed\"}\r\n                                    plotKey={\"wind_speed\"}\r\n                                    unit={\"km/h\"}/>\r\n                            </div>\r\n                            <div className=\"rainPlot\" style={{transform: `rotateY(${(currentSlide-1) * 0.25}turn)`}}>\r\n                                <PlotForADay\r\n                                    currentHour={currentHour}\r\n                                    weatherData={weatherData}\r\n                                    dataKey={\"rain_1h\"}\r\n                                    plotKey={\"rain_1h\"}\r\n                                    unit={\"mm\"}\r\n                                    decimalPrecision={1}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import \"./weatherForecastForAWeek.scss\";\r\nimport React from \"react\";\r\n\r\nexport default function WeatherForecastForAWeek({cityName, weatherData}) {\r\n    return (\r\n        <div className=\"weatherForecastForAWeek\">\r\n            <div className=\"contentContainer\">\r\n                <h1>\r\n                    Forecast for a week\r\n                </h1>\r\n            </div>\r\n            <div className=\"footer\">\r\n                <span>\r\n                    The weather data displayed on this website is provided by\r\n                    <a href=\"https://openweathermap.org\"> OpenWeather (TM)</a> under the\r\n                    <a href=\"https://creativecommons.org/licenses/by-sa/4.0/\"> Creative Commons Attribution-ShareAlike 4.0 International licence (CC BY-SA 4.0)</a>.\r\n                    Data and database are open and licensed by <a href=\"https://opendatacommons.org/licenses/odbl/\"> Open Data Commons Open Database License (ODbL)</a>.\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import {useEffect, useRef, useState} from \"react\";\r\n\r\nexport function utcTimeFromUTCUnix(unixUTCTimeInSeconds) {\r\n    const dateUTC = new Date(unixUTCTimeInSeconds * 1000);\r\n    const hoursUTC = dateUTC.getUTCHours();\r\n    let minutesUTC = dateUTC.getUTCMinutes().toString();\r\n    minutesUTC = minutesUTC.length === 1 ? \"0\" + minutesUTC : minutesUTC;\r\n    let secondsUTC = dateUTC.getUTCSeconds().toString();\r\n    secondsUTC = secondsUTC.length === 1 ? \"0\" + secondsUTC : secondsUTC;\r\n\r\n    return hoursUTC + ':' + minutesUTC + ':' + secondsUTC;\r\n}\r\n\r\nexport function localTimeFromUTCUnix(unixUTCTimeInSeconds) {\r\n    const date = new Date(unixUTCTimeInSeconds * 1000);\r\n    const hours = date.getHours();\r\n    let minutes = date.getMinutes().toString();\r\n    minutes = minutes.length === 1 ? \"0\" + minutes : minutes;\r\n    let seconds = date.getSeconds().toString();\r\n    seconds = seconds.length === 1 ? \"0\" + seconds : seconds;\r\n\r\n    return hours + ':' + minutes + ':' + seconds;\r\n}\r\n\r\n/**\r\n * Provides the basic functionality for a vertical scroll snap for touch swipe scrolls.\r\n *\r\n * Maintains a state for the currentSlideId being updated on vertical touch scroll swipes in a range from zero\r\n * to numberOfSlides.\r\n *\r\n * Example usage within a react functional component:\r\n *\r\n * const [currentSlideId, handleTouchStart, scrollOnVerticalSwipe] = VerticalScrollSnap(2);\r\n *\r\n * return (\r\n *   <div className=\"slideContainer\"\r\n *     onTouchStart={touchStartEvent => handleTouchStart(touchStartEvent)}\r\n *     onTouchMove={touchMoveEvent => scrollOnVerticalSwipe(touchMoveEvent)}\r\n *   >\r\n *     <div className=\"slide\" style={{transform: `translateY(-${currentSlideId * 100}%)`}}>\r\n *       <h1>Content of first slide.</h1>\r\n *     </div>\r\n *     <div className=\"slide\" style={{transform: `translateY(${(1 - currentSlideId) * 100}%)`}}>\r\n *       <h1>Content of second slide.</h1>\r\n *     </div>\r\n *   </div>\r\n * );\r\n *\r\n * @param {number} numberOfSlides - The number of slides you want to scroll through.\r\n * @returns {Array} The current slide ID, a function to call onTouchStart, and a function to call on onTouchMove.\r\n */\r\nexport function VerticalScrollSnap(numberOfSlides) {\r\n    const minSlideId = 0;\r\n    const maxSlideId = Math.max(0, numberOfSlides - 1);\r\n    const [currentSlideId, setCurrentSlide] = useState(minSlideId);\r\n\r\n    const touchStartPosition = useRef([0, 0]);\r\n    const isAwaitingScroll = useRef(false);\r\n\r\n    /* Saves starting point of touch to check for a vertical scroll on swipe. */\r\n    function handleTouchStart(e) {\r\n        touchStartPosition.current = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n        isAwaitingScroll.current = true;\r\n    }\r\n\r\n    /**\r\n    * Checks for a vertical swipe and scrolls into according direction.\r\n    *\r\n    * isAwaitingScroll is used to block further scrolling if swipe continues longer than scroll animation.\r\n    */\r\n    function scrollOnVerticalSwipe(e) {\r\n        if (isAwaitingScroll.current) {\r\n            const touchCurrentPosition = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n            const swipeVectorX = touchCurrentPosition[0] - touchStartPosition.current[0];\r\n            const swipeVectorY = touchCurrentPosition[1] - touchStartPosition.current[1];\r\n            const isSwipingVertically = Math.abs(swipeVectorX) < Math.abs(swipeVectorY);\r\n            const isSwipingDown = swipeVectorY > 0 && isSwipingVertically;\r\n            const isSwipingUp = swipeVectorY < 0 && isSwipingVertically;\r\n\r\n            if (isSwipingUp) {\r\n                setCurrentSlide(currentSlideId < maxSlideId ? currentSlideId + 1 : currentSlideId);\r\n                isAwaitingScroll.current = false;\r\n            }\r\n\r\n            if (isSwipingDown) {\r\n                setCurrentSlide(currentSlideId > minSlideId ? currentSlideId - 1 : currentSlideId)\r\n                isAwaitingScroll.current = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return [currentSlideId, handleTouchStart, scrollOnVerticalSwipe];\r\n}\r\n\r\nfunction getWindowInnerHeight() {\r\n    const {innerHeight: height} = window;\r\n    return height;\r\n}\r\n\r\n/**\r\n * Tracks the maximal inner height of the window.\r\n *\r\n * @returns {number} A state consisting of the maximal inner height of the window.\r\n */\r\nexport function MaxWindowInnerHeight() {\r\n    const [maxWindowInnerHeight, setMaxWindowInnerHeight] = useState(getWindowInnerHeight());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            const currentWindowInnerHeight = getWindowInnerHeight();\r\n            if (currentWindowInnerHeight > maxWindowInnerHeight) {\r\n                setMaxWindowInnerHeight(currentWindowInnerHeight);\r\n            }\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    },);\r\n\r\n    return maxWindowInnerHeight;\r\n}","import axios from \"axios\";\r\nimport {utcTimeFromUTCUnix} from \"./utils\"\r\n\r\nexport const getWeatherData = async (cityName) => {\r\n    try {\r\n        // Since OWM one call api accepts latitude and longitude coordinates only, we first fetch the current\r\n        // weather - containing the coordinates - using the city name and fetch the forecast using the coordinates.\r\n        const currentWeather = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${process.env.REACT_APP_API_KEY}`);\r\n        const lat = currentWeather.data.coord.lat;\r\n        const lon = currentWeather.data.coord.lon;\r\n        const currentUnixTimeUTC = currentWeather.data.dt;\r\n        const currentUnixTimeInCity = currentWeather.data.dt + currentWeather.data.timezone;\r\n\r\n        // Historical Data up to the last full hour starting from 00:00 going to and including 11:00 for example at 11:08\r\n        const todaysHistoricalWeather = await axios.get(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${currentUnixTimeUTC}&units=metric&appid=${process.env.REACT_APP_API_KEY}`);\r\n        const hoursInTwoDays = 48;\r\n        let hourlyWeatherForTwoDays = [];\r\n\r\n        const dateInCity = new Date(currentUnixTimeInCity * 1000);\r\n        const hoursToFillWithHistoricalData = dateInCity.getUTCHours();\r\n        // Last entry is not used because it corresponds to the same hour as the first entry of the forecast,\r\n        // which is more precise/already updated\r\n        const hoursOfHistoricalDataAvailable = todaysHistoricalWeather.data.hourly.length - 1;\r\n        if (hoursOfHistoricalDataAvailable < hoursToFillWithHistoricalData){\r\n            const yesterdayUnixTimeUTC = currentUnixTimeUTC - 86400;\r\n            const yesterdaysHistoricalWeather = await axios.get(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${yesterdayUnixTimeUTC}&units=metric&appid=${process.env.REACT_APP_API_KEY}`);\r\n\r\n            const hoursToFillWithYesterdaysData = hoursToFillWithHistoricalData - hoursOfHistoricalDataAvailable;\r\n            console.assert(hoursToFillWithYesterdaysData <= yesterdaysHistoricalWeather.data.hourly.length);\r\n            const startIndexYesterday = yesterdaysHistoricalWeather.data.hourly.length - hoursToFillWithYesterdaysData;\r\n            for (let i = startIndexYesterday; i < yesterdaysHistoricalWeather.data.hourly.length; i++){\r\n                hourlyWeatherForTwoDays.push({\r\n                    \"temperature\": Math.round(yesterdaysHistoricalWeather.data.hourly[i].temp),\r\n                    \"wind_deg\": yesterdaysHistoricalWeather.data.hourly[i].wind_deg,\r\n                    \"wind_speed\": Math.round(yesterdaysHistoricalWeather.data.hourly[i].wind_speed * 3.6),\r\n                    \"cloudiness\": yesterdaysHistoricalWeather.data.hourly[i].clouds,\r\n                    \"weather\": yesterdaysHistoricalWeather.data.hourly[i].weather,\r\n                    \"probabilityOfPrecipitation\": 0,\r\n                    \"rain_1h\": (\"rain\" in yesterdaysHistoricalWeather.data.hourly[i] ? yesterdaysHistoricalWeather.data.hourly[i].rain[\"1h\"] : 0),\r\n                    \"snow_1h\": (\"snow\" in yesterdaysHistoricalWeather.data.hourly[i] ? yesterdaysHistoricalWeather.data.hourly[i].snow[\"1h\"] : 0),\r\n                    \"timeUTC\": utcTimeFromUTCUnix(yesterdaysHistoricalWeather.data.hourly[i].dt),\r\n                    \"timeLocal\": utcTimeFromUTCUnix(yesterdaysHistoricalWeather.data.hourly[i].dt + currentWeather.data.timezone),\r\n                    \"dt\": yesterdaysHistoricalWeather.data.hourly[i].dt});\r\n            }\r\n        }\r\n\r\n        const hoursAlreadyFilled = hourlyWeatherForTwoDays.length;\r\n        const startIndexToday = hoursOfHistoricalDataAvailable - (hoursToFillWithHistoricalData - hoursAlreadyFilled);\r\n        for (let i = startIndexToday; i < hoursOfHistoricalDataAvailable; i++){\r\n            hourlyWeatherForTwoDays.push({\r\n                \"temperature\": Math.round(todaysHistoricalWeather.data.hourly[i].temp),\r\n                \"wind_deg\": todaysHistoricalWeather.data.hourly[i].wind_deg,\r\n                \"wind_speed\": Math.round(todaysHistoricalWeather.data.hourly[i].wind_speed * 3.6),\r\n                \"cloudiness\": todaysHistoricalWeather.data.hourly[i].clouds,\r\n                \"weather\": todaysHistoricalWeather.data.hourly[i].weather,\r\n                \"probabilityOfPrecipitation\": 0,\r\n                \"rain_1h\": (\"rain\" in todaysHistoricalWeather.data.hourly[i] ? todaysHistoricalWeather.data.hourly[i].rain[\"1h\"] : 0),\r\n                \"snow_1h\": (\"snow\" in todaysHistoricalWeather.data.hourly[i] ? todaysHistoricalWeather.data.hourly[i].snow[\"1h\"] : 0),\r\n                \"timeUTC\": utcTimeFromUTCUnix(todaysHistoricalWeather.data.hourly[i].dt),\r\n                \"timeLocal\": utcTimeFromUTCUnix(todaysHistoricalWeather.data.hourly[i].dt + currentWeather.data.timezone),\r\n                \"dt\": todaysHistoricalWeather.data.hourly[i].dt});\r\n        }\r\n\r\n        const exclude = \"current,minutely,alerts\"\r\n        // Hourly forecast starts at previous full hour - e.g. for 11:08 at 11:00\r\n        const nextDaysForecast = await axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=${exclude}&appid=${process.env.REACT_APP_API_KEY}`);\r\n        const numberOfEntriesToFill = hoursInTwoDays - hourlyWeatherForTwoDays.length;\r\n        console.assert(numberOfEntriesToFill <= nextDaysForecast.data.hourly.length);\r\n        for (let i = 0; i < numberOfEntriesToFill; i++){\r\n            hourlyWeatherForTwoDays.push({\r\n                \"temperature\": Math.round(nextDaysForecast.data.hourly[i].temp),  // in °C\r\n                \"wind_deg\": nextDaysForecast.data.hourly[i].wind_deg,  // from 0 to 360 degrees\r\n                \"wind_speed\": Math.round(nextDaysForecast.data.hourly[i].wind_speed * 3.6),  // in km/h\r\n                \"cloudiness\": nextDaysForecast.data.hourly[i].clouds,  // in % from 0 to 100\r\n                \"weather\": nextDaysForecast.data.hourly[i].weather,  // data with key for icon\r\n                \"probabilityOfPrecipitation\": (\"pop\" in nextDaysForecast.data.hourly[i] ? nextDaysForecast.data.hourly[i][\"pop\"] : 0),  // in percent from 0.0 to 1.0\r\n                \"rain_1h\": (\"rain\" in nextDaysForecast.data.hourly[i] ? nextDaysForecast.data.hourly[i].rain[\"1h\"] : 0),  // in mm\r\n                \"snow_1h\": (\"snow\" in nextDaysForecast.data.hourly[i] ? nextDaysForecast.data.hourly[i].snow[\"1h\"] : 0),  // in mm\r\n                \"timeUTC\": utcTimeFromUTCUnix(nextDaysForecast.data.hourly[i].dt),\r\n                \"timeLocal\": utcTimeFromUTCUnix(nextDaysForecast.data.hourly[i].dt + currentWeather.data.timezone),\r\n                \"dt\": nextDaysForecast.data.hourly[i].dt});\r\n        }\r\n\r\n        // Workaround: recharts draws bars with positive and negative values into different directions.\r\n        //  I didn't find a way to change the behaviour to draw all bars into one direction - setting the bottom\r\n        //  value of the bars as its called in matplotlib. This workaround shifts all values into a range starting\r\n        //  from the value 1 if at least one element is negative. The shifted values as used for plotting while the\r\n        //  original values are used for the labels of the bars.\r\n        let startIndex = 0;\r\n        let endIndex = 23;\r\n        for (let dayId = 0; dayId < 2; dayId++) {\r\n            let roundedTemperatureArray = [];\r\n            for(let i = startIndex; i <= endIndex; i++) {\r\n                roundedTemperatureArray.push(hourlyWeatherForTwoDays[i][\"temperature\"]);\r\n            }\r\n\r\n            let lowestTemperature = Math.min(...roundedTemperatureArray);\r\n            let temperatureArrayForPlot = roundedTemperatureArray.map( function(value) {\r\n                return value - (lowestTemperature - 1);\r\n            } );\r\n\r\n            let indexForPlotData = 0;\r\n            for(let i = startIndex; i <= endIndex; i++) {\r\n                hourlyWeatherForTwoDays[i][\"temperatureForPlot\"] = temperatureArrayForPlot[indexForPlotData];\r\n                indexForPlotData++;\r\n            }\r\n\r\n            startIndex += 24;\r\n            endIndex += 24;\r\n        }\r\n\r\n        const weatherData = {\"hourly\": hourlyWeatherForTwoDays};\r\n\r\n        // Reconstruct the current hour of the requested city\r\n        const utcNow = Date.now();  // Use .now() because current time in data might be from previous hour\r\n        const nowInTimezone = (utcNow + (currentWeather.data.timezone * 1000));\r\n        const dateInTimezone = new Date(nowInTimezone);\r\n        const currentHour = dateInTimezone.getUTCHours();  // .getUTCHours() to not apply the timezone of the user\r\n        weatherData[\"currentHour\"] = currentHour;\r\n\r\n        // Save hours of sunrise and sunset for current and next day\r\n        weatherData[\"hoursOfSunrise\"] = [];\r\n        weatherData[\"hoursOfSunset\"] = [];\r\n        for (let dayId = 0; dayId < 2; dayId++) {\r\n            const sunriseInTimezone = new Date((nextDaysForecast.data.daily[dayId].sunrise + currentWeather.data.timezone) * 1000);\r\n            const hourOfSunrise = sunriseInTimezone.getUTCHours();\r\n            const sunsetInTimezone = new Date((nextDaysForecast.data.daily[dayId].sunset + currentWeather.data.timezone) * 1000);\r\n            const hourOfSunset = sunsetInTimezone.getUTCHours();\r\n            weatherData[\"hoursOfSunrise\"].push(hourOfSunrise);\r\n            weatherData[\"hoursOfSunset\"].push(hourOfSunset);\r\n        }\r\n\r\n        return Promise.resolve(weatherData);\r\n    } catch (error) {\r\n        console.log(\"Failed to fetch weather data within getWeatherData\");\r\n        console.log(error);\r\n        return Promise.reject(Error(error));\r\n    }\r\n}","import \"./app.scss\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {useCookies} from 'react-cookie';\r\nimport CitySearchBar from \"./components/citySearchBar/CitySearchBar\";\r\nimport WeatherForecastForADay from \"./components/weatherForecastForADay/WeatherForecastForADay\";\r\nimport WeatherForecastForAWeek from \"./components/weatherForecastForAWeek/WeatherForecastForAWeek\";\r\nimport {getWeatherData} from \"./data\"\r\nimport {MaxWindowInnerHeight, VerticalScrollSnap} from \"./utils\"\r\n\r\nfunction App() {\r\n    // The maximal inner height of the window, being used as the minHeight of the App to prevent a resize of the\r\n    // components when the Android keyboard is opened - which leads to a smaller inner height.\r\n    const maxWindowInnerHeight = MaxWindowInnerHeight();\r\n\r\n    const [currentSlideId, handleTouchStart, scrollOnVerticalSwipe] = VerticalScrollSnap(3);\r\n\r\n    const [cookies, setCookie, removeCookie] = useCookies(['cityName']);\r\n\r\n    const [cityName, updateCityName] = useState(cookies.cityName ? cookies.cityName : \"\");\r\n    const [weatherData, updateWeatherData] = useState();\r\n    const triedToFetchData = useRef(false);\r\n\r\n    const reloadWeather = async (e) => {\r\n        e.preventDefault();\r\n        await fetchWeather();\r\n    };\r\n\r\n    /**\r\n     * Fetch weather forecast from OpenWeatherMap (OWM)\r\n     *\r\n     * If fetch is successful, the current city name is saved in the cookies, so the user doesn't need to specify\r\n     * it again on reload.\r\n     * Otherwise the city name entry in the cookies is removed and the forecast data is deleted to show the user\r\n     * that the forecast is not available.\r\n     */\r\n    const fetchWeather = async () => {\r\n        try {\r\n            triedToFetchData.current = true;\r\n\r\n            const localWeatherData = await getWeatherData(cityName);\r\n\r\n            setCookie('cityName', cityName, {path: '/', secure: true, sameSite: \"strict\", maxAge: 31536000});\r\n            updateWeatherData(localWeatherData);\r\n        } catch (error) {\r\n            console.log(\"Failed to fetch weather data\");\r\n            console.log(error);\r\n            removeCookie(\"cityName\", {path: '/', secure: true, sameSite: \"strict\", maxAge: 31536000});\r\n            updateWeatherData();\r\n        }\r\n    };\r\n\r\n    // Fetch weather on first render if city name is already defined in cookies\r\n    useEffect(() => {\r\n        if (cookies.cityName) {\r\n            fetchWeather();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"App\" style={{minHeight : `${maxWindowInnerHeight}px`}}>\r\n            <div className=\"websiteContent\">\r\n                <CitySearchBar cityName={cityName} updateCityName={updateCityName} reloadWeather={reloadWeather}/>\r\n                {weatherData === undefined ? (\r\n                    <div className=\"noData\">\r\n                        {triedToFetchData.current === false ? (\r\n                            <h1>Search for a city name.<br/>Get the weather forecast.</h1>\r\n                        ) : (\r\n                            <h1>Failed to get weather data.<br/>Try another city.</h1>\r\n                            )\r\n                        }\r\n                    </div>\r\n                ) : (\r\n                    <div\r\n                        className=\"sections\"\r\n                        onTouchStart={touchStartEvent => handleTouchStart(touchStartEvent)}\r\n                        onTouchMove={touchMoveEvent => scrollOnVerticalSwipe(touchMoveEvent)}\r\n                    >\r\n                        <div className=\"container\" style={{transform: `translateY(-${currentSlideId * 100}%)`}}>\r\n                            <WeatherForecastForADay\r\n                                dayId={0}\r\n                                weatherData={weatherData.hourly.slice(0, 24)}\r\n                                currentHour={weatherData[\"currentHour\"]}\r\n                                hourOfSunrise={weatherData[\"hoursOfSunrise\"][0]}\r\n                                hourOfSunset={weatherData[\"hoursOfSunset\"][0]}\r\n                            />\r\n                        </div>\r\n                        <div className=\"container\" style={{transform: `translateY(${(1 - currentSlideId) * 100}%)`}}>\r\n                            <WeatherForecastForADay\r\n                                dayId={1}\r\n                                weatherData={weatherData.hourly.slice(24, 48)}\r\n                                currentHour={weatherData[\"currentHour\"]}\r\n                                hourOfSunrise={weatherData[\"hoursOfSunrise\"][1]}\r\n                                hourOfSunset={weatherData[\"hoursOfSunset\"][1]}\r\n                            />\r\n                        </div>\r\n                        <div className=\"container\" style={{transform: `translateY(${(2 - currentSlideId) * 100}%)`}}>\r\n                            <WeatherForecastForAWeek cityName={cookies.cityName} weatherData={weatherData}/>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\nimport 'semantic-ui-css/semantic.min.css';\nimport {CookiesProvider} from 'react-cookie';\n\nimport App from \"./App\";\n\nReactDOM.render(\n    <CookiesProvider>\n        <App/>\n    </CookiesProvider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}