{"version":3,"sources":["assets/magnifying_glass.svg","components/citySearchBar/CitySearchBar.jsx","components/hourOfDayListItem/HourOfDayListItem.jsx","components/outlinePlot/OutlinePlot.jsx","assets/sunny_icon.svg","components/dataListItem/DataListItem.jsx","components/plotForADay/PlotForADay.jsx","components/weatherForecastForADay/WeatherForecastForADay.jsx","components/weatherForecastForAWeek/WeatherForecastForAWeek.jsx","utils.jsx","data.jsx","App.jsx","index.js"],"names":["_g","_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgMagnifyingGlass","_ref","svgRef","title","titleId","props","id","width","height","viewBox","xmlns","ref","stroke","cx","cy","rx","ry","fill","strokeLinecap","strokeLinejoin","strokeWidth","d","ForwardRef","CitySearchBar","cityName","updateCityName","reloadWeather","className","onSubmit","onKeyUp","e","blur","onChange","value","placeholder","type","autoFocus","HourOfDayListItem","time","active","sunrise","sunset","createLine","data","dataKey","lineString","minValue","Number","MAX_VALUE","maxValue","Math","min","max","toString","PlotForADay","dayID","plotID","weatherData","currentHour","plotDayID","useEffect","svg","document","querySelector","children","reduce","acc","el","getBBox","x","y","xMin","xMax","yMin","yMax","viewbox","setAttribute","preserveAspectRatio","dx","dy","stdDeviation","result","operator","in","in2","floodColor","floodOpacity","vectorEffect","href","filter","clipPath","_stop","DataListItem","SvgSunnyIcon","x1","x2","y1","y2","gradientTransform","gradientUnits","stopColor","offset","style","plotKey","unit","decimalPrecision","Array","map","hourOfDay","WeatherForecastForADay","dayId","hourOfSunrise","hourOfSunset","slideID","dayToDisplay","useState","useRef","transform","WeatherForecastForAWeek","utcTimeFromUTCUnix","unixUTCTimeInSeconds","dateUTC","Date","hoursUTC","getUTCHours","minutesUTC","getUTCMinutes","secondsUTC","getUTCSeconds","getWindowInnerHeight","window","innerHeight","getWeatherData","a","axios","get","process","currentWeather","lat","coord","lon","currentUnixTimeUTC","dt","currentUnixTimeInCity","timezone","todaysHistoricalWeather","hoursInTwoDays","hourlyWeatherForTwoDays","dateInCity","hoursToFillWithHistoricalData","hoursOfHistoricalDataAvailable","hourly","yesterdayUnixTimeUTC","yesterdaysHistoricalWeather","hoursToFillWithYesterdaysData","console","assert","startIndexYesterday","wasRaining","rain","snow","push","round","temp","wind_deg","wind_speed","clouds","weather","toFixed","hoursAlreadyFilled","nextDaysForecast","numberOfEntriesToFill","startIndex","endIndex","roundedTemperatureArray","lowestTemperature","temperatureArrayForPlot","indexForPlotData","utcNow","now","nowInTimezone","dateInTimezone","sunriseInTimezone","daily","sunsetInTimezone","Promise","resolve","log","reject","Error","App","maxWindowInnerHeight","setMaxWindowInnerHeight","handleResize","currentWindowInnerHeight","addEventListener","removeEventListener","MaxWindowInnerHeight","numberOfHorizontalSlides","numberOfVerticalSlides","minSlidePosition","maxSlidePosition","currentSlidePosition","setCurrentSlide","touchStartPosition","isAwaitingScroll","preventDefault","current","targetTouches","clientX","clientY","touchCurrentPosition","swipeVectorX","swipeVectorY","abs","isSwipingLeft","newHorizontalSlidePosition","isSwipingUp","newVerticalSlidePosition","ScrollSnap2D","handleTouchStart","scrollOnSwipe","useCookies","cookies","setCookie","removeCookie","updateWeatherData","triedToFetchData","fetchWeather","localWeatherData","path","secure","sameSite","maxAge","minHeight","undefined","onTouchStart","touchStartEvent","onTouchMove","touchMoveEvent","slice","ReactDOM","render","CookiesProvider","getElementById"],"mappings":"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","file":"static/js/main.17c7b8e9.chunk.js","sourcesContent":["var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgMagnifyingGlass(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"SVGRoot\",\n    width: \"16px\",\n    height: \"16px\",\n    viewBox: \"0 0 16 16\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    stroke: \"#000\"\n  }, /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 5.6727,\n    cy: 5.7476,\n    rx: 3.0967,\n    ry: 3.1013,\n    fill: \"none\",\n    strokeLinecap: \"square\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 1.7101\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m9.2387 9.2405 3.7161 3.7215\",\n    fill: \"none\",\n    strokeWidth: 1.6549\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m9.2387 10.481-1.2387-2.481 2.4774 1.2405z\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 0.46851\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgMagnifyingGlass);\nexport default __webpack_public_path__ + \"static/media/magnifying_glass.7b20c50e.svg\";\nexport { ForwardRef as ReactComponent };","import \"./citySearchBar.scss\";\r\nimport {ReactComponent as MagnifyingGlassIcon} from '../../assets/magnifying_glass.svg';\r\n\r\nexport default function CitySearchBar({cityName, updateCityName, reloadWeather}) {\r\n    function hideKeyboardOnEnter(e) {\r\n        if (e.key === 'Enter') {\r\n            e.target.blur();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"citySearchBar\">\r\n            <form onSubmit={reloadWeather}>\r\n                <div className=\"formComponents\">\r\n                    <input\r\n                        onKeyUp={hideKeyboardOnEnter}\r\n                        onChange={(e) => updateCityName(e.target.value)}\r\n                        placeholder={cityName === \"\" ? \"City\" : cityName}\r\n                        type=\"text\"\r\n                        id=\"cityNameInput\"\r\n                        autoFocus\r\n                    />\r\n                    <button type=\"submit\">\r\n                        <MagnifyingGlassIcon className=\"magnifyingGlassIcon\"/>\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import \"./hourOfDayListItem.scss\"\r\n\r\nexport default function HourOfDayListItem({time, active, sunrise, sunset}) {\r\n    let className = \"hourOfDayListItem\";\r\n    className = active ? className + \" active\" : className;\r\n    className = time < sunrise || time > sunset ? className + \" night\" : className + \" day\" ;\r\n    className = time === sunrise || time === sunset ? className + \" twilight\" : className;\r\n\r\n    return (\r\n        <li\r\n            className={className}\r\n        >\r\n            <span>\r\n                {time}:00\r\n            </span>\r\n        </li>\r\n    );\r\n}","import React, {useEffect} from 'react';\r\n\r\nfunction createLine(data, dataKey) {\r\n    let lineString = \"M 0,0 \";\r\n    let minValue = Number.MAX_VALUE;\r\n    let maxValue = -Number.MAX_VALUE;\r\n    for (let i = 0; i < data.length; i++) {\r\n        minValue = Math.min(minValue, data[i][dataKey]);\r\n        maxValue = Math.max(maxValue, data[i][dataKey]);\r\n    }\r\n\r\n    const minPlotWidth = 1;\r\n    minValue -= Math.max(minPlotWidth, (maxValue - minValue) * 0.2);\r\n\r\n    for (let i = 0; i < data.length; i++) {\r\n        const currentValue = data[i][dataKey] - minValue;\r\n        lineString += \"H \" + currentValue.toString() + \" \";\r\n        lineString += \"v 1 \";\r\n    }\r\n\r\n    lineString += \"L 0,\" + data.length.toString() + \" z\";\r\n\r\n    return lineString;\r\n}\r\n\r\nexport default function PlotForADay({dayID, plotID, currentHour, weatherData, dataKey}) {\r\n    const plotDayID = plotID.toString() + dayID.toString();\r\n\r\n    const minViewBoxWidth = 5;\r\n    useEffect(() => {\r\n        const svg = document.querySelector(\".\" + plotDayID);\r\n\r\n        const { xMin, xMax, yMin, yMax } = [...svg.children].reduce((acc, el) => {\r\n            const { x, y, width, height } = el.getBBox();\r\n            if (!acc.xMin || x < acc.xMin) acc.xMin = x;\r\n            if (!acc.xMax || x + width > acc.xMax) acc.xMax = x + width;\r\n            if (!acc.yMin || y < acc.yMin) acc.yMin = y;\r\n            if (!acc.yMax || y + height > acc.yMax) acc.yMax = y + height;\r\n            return acc;\r\n        }, {});\r\n\r\n        const viewbox = `${xMin} ${yMin} ${Math.max(\r\n            xMax - xMin,\r\n            minViewBoxWidth\r\n        )} ${yMax - yMin}`;\r\n\r\n        svg.setAttribute(\"viewBox\", viewbox);\r\n    }, [weatherData]);\r\n\r\n    return (\r\n        <svg\r\n            className={\"svgPlot \" + plotDayID}\r\n            viewBox=\"0 0 100 100\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            preserveAspectRatio=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n        >\r\n            <defs>\r\n                <filter id=\"inset-shadow\">\r\n                    <feOffset dx=\"0.1\" dy=\"0.1\" />\r\n                    <feGaussianBlur stdDeviation=\"0.4\" result=\"offset-blur\" />\r\n                    <feComposite\r\n                        operator=\"out\"\r\n                        in=\"SourceGraphic\"\r\n                        in2=\"offset-blur\"\r\n                        result=\"inverse\"\r\n                    />\r\n                    <feFlood floodColor=\"black\" floodOpacity=\".95\" result=\"color\" />\r\n                    <feComposite\r\n                        operator=\"in\"\r\n                        in=\"color\"\r\n                        in2=\"inverse\"\r\n                        result=\"shadow\"\r\n                    />\r\n                    <feComposite operator=\"over\" in=\"shadow\" in2=\"SourceGraphic\" />\r\n                </filter>\r\n\r\n                <path\r\n                    id={plotDayID}\r\n                    stroke=\"#efefef\"\r\n                    fill=\"none\"\r\n                    strokeWidth=\"4\"\r\n                    vectorEffect=\"non-scaling-stroke\"\r\n                    d={createLine(weatherData, dataKey)}\r\n                />\r\n                <clipPath id={\"clip\" + plotDayID}>\r\n                    <use href={\"#\" + plotDayID} />\r\n                </clipPath>\r\n            </defs>\r\n\r\n            <path\r\n                className=\"shadowPath\"\r\n                fill=\"#505160\"\r\n                strokeWidth=\"0\"\r\n                vectorEffect=\"non-scaling-stroke\"\r\n                d={createLine(weatherData, dataKey)}\r\n                filter=\"url(#inset-shadow)\"\r\n            />\r\n            {/*<path*/}\r\n            {/*    className=\"currentHourPath\"*/}\r\n            {/*    fill=\"#ffffff\"*/}\r\n            {/*    strokeWidth=\"0\"*/}\r\n            {/*    vectorEffect=\"non-scaling-stroke\"*/}\r\n            {/*    d={\"M 0,\" + currentHour.toString() + \" H 10 v 1 H 0 z\"}*/}\r\n            {/*/>*/}\r\n            <use href={\"#\" + plotDayID} clipPath={\"url(#clip\" + plotDayID + \")\"}/>\r\n        </svg>\r\n    );\r\n}","var _stop;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSunnyIcon(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"SVGRoot\",\n    viewBox: \"0 0 16 16\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linearGradient1407\",\n    x1: 9.6003,\n    x2: 6.8909,\n    y1: 0.92964,\n    y2: 14.12,\n    gradientTransform: \"matrix(1.0567 0 0 1.0567 -.1002 -.54263)\",\n    gradientUnits: \"userSpaceOnUse\"\n  }, _stop || (_stop = /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#fff703\",\n    offset: 0\n  })), /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#ff9d03\",\n    style: {\n      stopColor: \"#ffba03\"\n    },\n    offset: 1\n  })), /*#__PURE__*/React.createElement(\"linearGradient\", {\n    id: \"linearGradient1464\",\n    x1: 9.7033,\n    x2: 6.8973,\n    y1: 0.78426,\n    y2: 14.425,\n    gradientTransform: \"matrix(1.0567 0 0 1.0567 -.1002 -.54263)\",\n    gradientUnits: \"userSpaceOnUse\"\n  }, /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#fff703\",\n    style: {\n      stopColor: \"#ffeb03\"\n    },\n    offset: 0\n  }), /*#__PURE__*/React.createElement(\"stop\", {\n    stopColor: \"#ff9d03\",\n    style: {\n      stopColor: \"#ffc603\"\n    },\n    offset: 1\n  }))), /*#__PURE__*/React.createElement(\"g\", {\n    style: {\n      stroke: \"url(#linearGradient1407)\"\n    }\n  }, /*#__PURE__*/React.createElement(\"g\", {\n    style: {\n      stroke: \"url(#linearGradient1464)\"\n    }\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m5.6575 10.164a3.2257 3.2257 0 0 1-0.50894-3.7257 3.2257 3.2257 0 0 1 3.3659-1.6764 3.2257 3.2257 0 0 1 2.6669 2.6509 3.2257 3.2257 0 0 1-1.6562 3.3759\",\n    style: {\n      fill: \"none\",\n      strokeLinecap: \"round\",\n      strokeWidth: 1.5,\n      stroke: \"url(#linearGradient1464)\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m11.413 13.284 0.3205 0.49871\",\n    style: {\n      fill: \"none\",\n      strokeLinecap: \"round\",\n      strokeWidth: 1.5,\n      stroke: \"url(#linearGradient1464)\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m14.195 9.2001 0.47167 0.093357\",\n    style: {\n      fill: \"none\",\n      strokeLinecap: \"round\",\n      strokeWidth: 1.5,\n      stroke: \"url(#linearGradient1464)\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m2.7224 11.482-0.45254 0.30119\",\n    style: {\n      fill: \"none\",\n      strokeLinecap: \"round\",\n      strokeWidth: 1.5,\n      stroke: \"url(#linearGradient1464)\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m7.4029 11.775-0.13444 0.563\",\n    style: {\n      fill: \"none\",\n      strokeLinecap: \"round\",\n      strokeWidth: 1.5,\n      stroke: \"url(#linearGradient1464)\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m1.2873 6.4551 0.53279 0.12057\",\n    style: {\n      fill: \"none\",\n      strokeLinecap: \"round\",\n      strokeWidth: 1.5,\n      stroke: \"url(#linearGradient1464)\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m13.72 4.1626-0.45696 0.30413\",\n    style: {\n      fill: \"none\",\n      strokeLinecap: \"round\",\n      strokeWidth: 1.5,\n      stroke: \"url(#linearGradient1464)\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m4.4848 2.6989-0.30021-0.45107\",\n    style: {\n      fill: \"none\",\n      strokeLinecap: \"round\",\n      strokeWidth: 1.5,\n      stroke: \"url(#linearGradient1464)\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m9.3942 1.7904 0.11881-0.52502\",\n    style: {\n      fill: \"none\",\n      strokeLinecap: \"round\",\n      strokeWidth: 1.5,\n      stroke: \"url(#linearGradient1464)\"\n    }\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSunnyIcon);\nexport default __webpack_public_path__ + \"static/media/sunny_icon.7c0951ad.svg\";\nexport { ForwardRef as ReactComponent };","import \"./dataListItem.scss\"\r\n\r\nexport default function DataListItem({data, time, active, sunrise, sunset}) {\r\n    let className = \"dataListItem\";\r\n    className = active ? className + \" active\" : className;\r\n    className = time < sunrise || time > sunset ? className + \" night\" : className + \" day\" ;\r\n    className = time === sunrise || time === sunset ? className + \" twilight\" : className;\r\n\r\n    return (\r\n        <li\r\n            className={className}\r\n        >\r\n            <span>\r\n                {data}\r\n            </span>\r\n        </li>\r\n    );\r\n}","import \"./plotForADay.scss\";\r\nimport React from 'react';\r\nimport OutlinePlot from \"../outlinePlot/OutlinePlot\";\r\nimport DataListItem from \"../dataListItem/DataListItem\";\r\nimport {ReactComponent as SunnyIcon} from \"../../assets/sunny_icon.svg\";\r\n\r\nexport default function PlotForADay({dayID,\r\n                                        plotID,\r\n                                        currentHour,\r\n                                        weatherData,\r\n                                        dataKey,\r\n                                        plotKey,\r\n                                        unit,\r\n                                        sunrise,\r\n                                        sunset,\r\n                                        decimalPrecision = 0}) {\r\n    return (\r\n        <div className=\"plotAndDataContainer\">\r\n            <div className=\"iconContainer\">\r\n                <ul>\r\n                    {[...Array(24)].map((x, hourOfDay) =>\r\n                        <SunnyIcon className=\"sunnyIcon\"/>\r\n                    )}\r\n                </ul>\r\n            </div>\r\n            <div className=\"dataContainer\">\r\n                <ul>\r\n                    {[...Array(24)].map((x, hourOfDay) =>\r\n                        <DataListItem\r\n                            key={hourOfDay}\r\n                            data={weatherData[hourOfDay][dataKey]}\r\n                            time={hourOfDay}\r\n                            active={currentHour === hourOfDay}\r\n                            sunrise={sunrise}\r\n                            sunset={sunset}\r\n                        />\r\n                    )}\r\n                </ul>\r\n            </div>\r\n            <div className=\"plotContainer\">\r\n                <OutlinePlot\r\n                    dayID={dayID}\r\n                    plotID={plotID}\r\n                    currentHour={currentHour}\r\n                    weatherData={weatherData}\r\n                    dataKey={plotKey}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import \"./weatherForecastForADay.scss\";\r\nimport HourOfDayListItem from \"../hourOfDayListItem/HourOfDayListItem\";\r\nimport React, {useRef, useState} from \"react\";\r\nimport PlotForADay from \"../plotForADay/PlotForADay\";\r\n\r\nexport default function WeatherForecastForADay({dayId, weatherData, currentHour, hourOfSunrise, hourOfSunset, slideID}) {\r\n    const dayToDisplay = dayId === 0 ? \"Today\" : \"Tomorrow\";\r\n\r\n    const numberOfSlides = 2;\r\n    const [currentSlide, setCurrentSlide] = useState(0);\r\n\r\n    const touchStartPosition = useRef([0, 0]);\r\n    const touchEndPosition = useRef([0, 0]);\r\n\r\n    function setTouchStartPosition(e) {\r\n        e.preventDefault();\r\n        touchStartPosition.current = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n        touchEndPosition.current = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n    }\r\n\r\n    function setMouseStartPosition(e) {\r\n        e.preventDefault();\r\n        touchStartPosition.current = [e.clientX, e.clientY];\r\n        touchEndPosition.current = [e.clientX, e.clientY];\r\n    }\r\n\r\n    function setTouchCurrentPosition(e) {\r\n        e.preventDefault();\r\n        touchEndPosition.current = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n    }\r\n\r\n    function setMouseCurrentPosition(e) {\r\n        touchEndPosition.current = [e.clientX, e.clientY];\r\n    }\r\n\r\n    function scrollOnVerticalSwipe(e) {\r\n        e.preventDefault();\r\n        const swipeVectorX = touchEndPosition.current[0] - touchStartPosition.current[0];\r\n        const swipeVectorY = touchEndPosition.current[1] - touchStartPosition.current[1];\r\n        const isSwipingHorizontally = Math.abs(swipeVectorX) > Math.abs(swipeVectorY);\r\n        const isSwipingRight = swipeVectorX > 50 && isSwipingHorizontally;\r\n        const isSwipingLeft = swipeVectorX < -50 && isSwipingHorizontally;\r\n\r\n        if (isSwipingLeft) {\r\n            setCurrentSlide(currentSlide < numberOfSlides - 1 ? currentSlide + 1 : 0);\r\n        }\r\n\r\n        if (isSwipingRight) {\r\n            setCurrentSlide(currentSlide > 0 ? currentSlide - 1 : numberOfSlides - 1)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"weatherForecastForADay\"\r\n            // onTouchStart={touchStartEvent => setTouchStartPosition(touchStartEvent)}\r\n            // onTouchMove={touchMoveEvent => setTouchCurrentPosition(touchMoveEvent)}\r\n            // onTouchEnd={(pointerEndEvent) => scrollOnVerticalSwipe(pointerEndEvent)}\r\n            // onMouseDown={mouseDownEvent => setMouseStartPosition(mouseDownEvent)}\r\n            // onMouseMove={mouseMoveEvent => setMouseCurrentPosition(mouseMoveEvent)}\r\n            // onMouseUp={(pointerEndEvent) => scrollOnVerticalSwipe(pointerEndEvent)}\r\n        >\r\n            <div className=\"contentContainer\">\r\n                <div className=\"dayDisplay\">\r\n                    <h1>\r\n                        {dayToDisplay}\r\n                    </h1>\r\n                </div>\r\n                <div className=\"forecast\">\r\n                    <div className=\"hoursOfDay\">\r\n                        <ul>\r\n                            {[...Array(24)].map((x, hourOfDay) =>\r\n                                <HourOfDayListItem\r\n                                    key={hourOfDay}\r\n                                    time={hourOfDay}\r\n                                    active={currentHour === hourOfDay}\r\n                                    sunrise={hourOfSunrise}\r\n                                    sunset={hourOfSunset}\r\n                                />\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"forecastPlot\">\r\n                        <div className=\"plotsContainer\">\r\n                            <div className=\"temperatureAndWindPlotContainer\" style={{transform: `rotateY(${slideID * 0.25}turn)`}} >\r\n                                <PlotForADay\r\n                                    dayID={dayId}\r\n                                    plotID={\"temperature\"}\r\n                                    currentHour={currentHour}\r\n                                    weatherData={weatherData}\r\n                                    dataKey={\"temperature\"}\r\n                                    plotKey={\"temperatureForPlot\"}\r\n                                    unit={\"°C\"}\r\n                                    sunrise={hourOfSunrise}\r\n                                    sunset={hourOfSunset}\r\n                                />\r\n                                <PlotForADay\r\n                                    dayID={dayId}\r\n                                    plotID={\"wind\"}\r\n                                    currentHour={currentHour}\r\n                                    weatherData={weatherData}\r\n                                    dataKey={\"wind_speed\"}\r\n                                    plotKey={\"wind_speed\"}\r\n                                    unit={\"km/h\"}\r\n                                    sunrise={hourOfSunrise}\r\n                                    sunset={hourOfSunset}\r\n                                />\r\n                            </div>\r\n                            <div className=\"rainPlotContainer\" style={{transform: `rotateY(${(slideID-1) * 0.25}turn)`}}>\r\n                                <PlotForADay\r\n                                    dayID={dayId}\r\n                                    plotID={\"probabilityOfPrecipitation\"}\r\n                                    currentHour={currentHour}\r\n                                    weatherData={weatherData}\r\n                                    dataKey={\"probabilityOfPrecipitation\"}\r\n                                    plotKey={\"probabilityOfPrecipitation\"}\r\n                                    unit={\"%\"}\r\n                                    sunrise={hourOfSunrise}\r\n                                    sunset={hourOfSunset}\r\n                                />\r\n                                <PlotForADay\r\n                                    dayID={dayId}\r\n                                    plotID={\"rain\"}\r\n                                    currentHour={currentHour}\r\n                                    weatherData={weatherData}\r\n                                    dataKey={\"rain_1h\"}\r\n                                    plotKey={\"rain_1h\"}\r\n                                    unit={\"mm\"}\r\n                                    sunrise={hourOfSunrise}\r\n                                    sunset={hourOfSunset}\r\n                                    decimalPrecision={1}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import \"./weatherForecastForAWeek.scss\";\r\nimport React from \"react\";\r\n\r\nexport default function WeatherForecastForAWeek({cityName, weatherData}) {\r\n    return (\r\n        <div className=\"weatherForecastForAWeek\">\r\n            <div className=\"contentContainer\">\r\n                <h1>\r\n                    Forecast for a week\r\n                </h1>\r\n            </div>\r\n            <div className=\"footer\">\r\n                <span>\r\n                    The weather data displayed on this website is provided by\r\n                    <a href=\"https://openweathermap.org\"> OpenWeather (TM)</a> under the\r\n                    <a href=\"https://creativecommons.org/licenses/by-sa/4.0/\"> Creative Commons Attribution-ShareAlike 4.0 International licence (CC BY-SA 4.0)</a>.\r\n                    Data and database are open and licensed by <a href=\"https://opendatacommons.org/licenses/odbl/\"> Open Data Commons Open Database License (ODbL)</a>.\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import {useEffect, useRef, useState} from \"react\";\r\n\r\nexport function utcTimeFromUTCUnix(unixUTCTimeInSeconds) {\r\n    const dateUTC = new Date(unixUTCTimeInSeconds * 1000);\r\n    const hoursUTC = dateUTC.getUTCHours();\r\n    let minutesUTC = dateUTC.getUTCMinutes().toString();\r\n    minutesUTC = minutesUTC.length === 1 ? \"0\" + minutesUTC : minutesUTC;\r\n    let secondsUTC = dateUTC.getUTCSeconds().toString();\r\n    secondsUTC = secondsUTC.length === 1 ? \"0\" + secondsUTC : secondsUTC;\r\n\r\n    return hoursUTC + ':' + minutesUTC + ':' + secondsUTC;\r\n}\r\n\r\nexport function localTimeFromUTCUnix(unixUTCTimeInSeconds) {\r\n    const date = new Date(unixUTCTimeInSeconds * 1000);\r\n    const hours = date.getHours();\r\n    let minutes = date.getMinutes().toString();\r\n    minutes = minutes.length === 1 ? \"0\" + minutes : minutes;\r\n    let seconds = date.getSeconds().toString();\r\n    seconds = seconds.length === 1 ? \"0\" + seconds : seconds;\r\n\r\n    return hours + ':' + minutes + ':' + seconds;\r\n}\r\n\r\n/**\r\n * Provides the basic functionality for a 2D scroll snap for touch swipe scrolls.\r\n *\r\n * Maintains a state for the currentSlidePosition being updated on touch scroll swipes in a range from [0, 0]\r\n * to [numberOfHorizontalSlides, numberOfVerticalSlides].\r\n *\r\n * Example usage within a react functional component:\r\n *\r\n * const [currentSlidePosition, handleTouchStart, scrollOnSwipe] = ScrollSnap2D(0, 2);\r\n *\r\n * return (\r\n *   <div className=\"slideContainer\"\r\n *     onTouchStart={touchStartEvent => handleTouchStart(touchStartEvent)}\r\n *     onTouchMove={touchMoveEvent => scrollOnSwipe(touchMoveEvent)}\r\n *   >\r\n *     <div className=\"slide\" style={{transform: `translateY(-${currentSlidePosition[1] * 100}%)`}}>\r\n *       <h1>Content of first slide.</h1>\r\n *     </div>\r\n *     <div className=\"slide\" style={{transform: `translateY(${(1 - currentSlidePosition[1]) * 100}%)`}}>\r\n *       <h1>Content of second slide.</h1>\r\n *     </div>\r\n *   </div>\r\n * );\r\n *\r\n * @param {number} numberOfHorizontalSlides - The number of horizontal slides in x direction you want to scroll through.\r\n * @param {number} numberOfVerticalSlides - The number of vertical slides in y direction you want to scroll through.\r\n * @returns {Array} The current slide position, a function to call onTouchStart, and a function to call on onTouchMove.\r\n */\r\nexport function ScrollSnap2D(numberOfHorizontalSlides, numberOfVerticalSlides) {\r\n    const minSlidePosition = [0, 0];\r\n    const maxSlidePosition = [Math.max(0, numberOfHorizontalSlides - 1),\r\n        Math.max(0, numberOfVerticalSlides - 1)];\r\n    const [currentSlidePosition, setCurrentSlide] = useState(minSlidePosition);\r\n\r\n    const touchStartPosition = useRef([0, 0]);\r\n    const isAwaitingScroll = useRef(false);\r\n\r\n    /* Saves starting point of touch to check for a vertical scroll on swipe. */\r\n    function handleTouchStart(e) {\r\n        e.preventDefault();\r\n        touchStartPosition.current = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n        isAwaitingScroll.current = true;\r\n    }\r\n\r\n    /**\r\n    * Checks for a swipe and scrolls into according direction.\r\n    *\r\n    * isAwaitingScroll is used to block further scrolling if swipe continues longer than scroll animation.\r\n    */\r\n    function scrollOnSwipe(e) {\r\n        e.preventDefault();\r\n        if (isAwaitingScroll.current) {\r\n            const touchCurrentPosition = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n            const swipeVectorX = touchCurrentPosition[0] - touchStartPosition.current[0];\r\n            const swipeVectorY = touchCurrentPosition[1] - touchStartPosition.current[1];\r\n            const isSwipingHorizontally = Math.abs(swipeVectorX) > Math.abs(swipeVectorY);\r\n\r\n            if (isSwipingHorizontally) {\r\n                const isSwipingRight = swipeVectorX > 0;\r\n                const isSwipingLeft = swipeVectorX < 0;\r\n\r\n                if (isSwipingRight) {\r\n                    const newHorizontalSlidePosition = currentSlidePosition[0] > minSlidePosition[0] ? currentSlidePosition[0] - 1 : currentSlidePosition[0];\r\n                    setCurrentSlide([newHorizontalSlidePosition, currentSlidePosition[1]])\r\n                }\r\n                if (isSwipingLeft) {\r\n                    const newHorizontalSlidePosition = currentSlidePosition[0] < maxSlidePosition[0] ? currentSlidePosition[0] + 1 : currentSlidePosition[0];\r\n                    setCurrentSlide([newHorizontalSlidePosition, currentSlidePosition[1]]);\r\n                }\r\n                isAwaitingScroll.current = false;\r\n            }\r\n            else {\r\n                const isSwipingDown = swipeVectorY > 0;\r\n                const isSwipingUp = swipeVectorY < 0;\r\n\r\n                if (isSwipingDown) {\r\n                    const newVerticalSlidePosition = currentSlidePosition[1] > minSlidePosition[1] ? currentSlidePosition[1] - 1 : currentSlidePosition[1];\r\n                    setCurrentSlide([currentSlidePosition[0], newVerticalSlidePosition])\r\n                }\r\n                if (isSwipingUp) {\r\n                    const newVerticalSlidePosition = currentSlidePosition[1] < maxSlidePosition[1] ? currentSlidePosition[1] + 1 : currentSlidePosition[1];\r\n                    setCurrentSlide([currentSlidePosition[0], newVerticalSlidePosition]);\r\n                }\r\n                isAwaitingScroll.current = false;\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    return [currentSlidePosition, handleTouchStart, scrollOnSwipe];\r\n}\r\n\r\nfunction getWindowInnerHeight() {\r\n    const {innerHeight: height} = window;\r\n    return height;\r\n}\r\n\r\n/**\r\n * Tracks the maximal inner height of the window.\r\n *\r\n * @returns {number} A state consisting of the maximal inner height of the window.\r\n */\r\nexport function MaxWindowInnerHeight() {\r\n    const [maxWindowInnerHeight, setMaxWindowInnerHeight] = useState(getWindowInnerHeight());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            const currentWindowInnerHeight = getWindowInnerHeight();\r\n            if (currentWindowInnerHeight > maxWindowInnerHeight) {\r\n                setMaxWindowInnerHeight(currentWindowInnerHeight);\r\n            }\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    },);\r\n\r\n    return maxWindowInnerHeight;\r\n}","import axios from \"axios\";\r\nimport {utcTimeFromUTCUnix} from \"./utils\"\r\n\r\nexport const getWeatherData = async (cityName) => {\r\n    try {\r\n        // Since OWM one call api accepts latitude and longitude coordinates only, we first fetch the current\r\n        // weather - containing the coordinates - using the city name and fetch the forecast using the coordinates.\r\n        const currentWeather = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${process.env.REACT_APP_API_KEY}`);\r\n        const lat = currentWeather.data.coord.lat;\r\n        const lon = currentWeather.data.coord.lon;\r\n        const currentUnixTimeUTC = currentWeather.data.dt;\r\n        const currentUnixTimeInCity = currentWeather.data.dt + currentWeather.data.timezone;\r\n\r\n        // Historical Data up to the last full hour starting from 00:00 going to and including 11:00 for example at 11:08\r\n        const todaysHistoricalWeather = await axios.get(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${currentUnixTimeUTC}&units=metric&appid=${process.env.REACT_APP_API_KEY}`);\r\n        const hoursInTwoDays = 48;\r\n        let hourlyWeatherForTwoDays = [];\r\n\r\n        const dateInCity = new Date(currentUnixTimeInCity * 1000);\r\n        const hoursToFillWithHistoricalData = dateInCity.getUTCHours();\r\n        // Last entry is not used because it corresponds to the same hour as the first entry of the forecast,\r\n        // which is more precise/already updated\r\n        const hoursOfHistoricalDataAvailable = todaysHistoricalWeather.data.hourly.length - 1;\r\n        if (hoursOfHistoricalDataAvailable < hoursToFillWithHistoricalData){\r\n            const yesterdayUnixTimeUTC = currentUnixTimeUTC - 86400;\r\n            const yesterdaysHistoricalWeather = await axios.get(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${yesterdayUnixTimeUTC}&units=metric&appid=${process.env.REACT_APP_API_KEY}`);\r\n\r\n            const hoursToFillWithYesterdaysData = hoursToFillWithHistoricalData - hoursOfHistoricalDataAvailable;\r\n            console.assert(hoursToFillWithYesterdaysData <= yesterdaysHistoricalWeather.data.hourly.length);\r\n            const startIndexYesterday = yesterdaysHistoricalWeather.data.hourly.length - hoursToFillWithYesterdaysData;\r\n            for (let i = startIndexYesterday; i < yesterdaysHistoricalWeather.data.hourly.length; i++){\r\n                const wasRaining = ((\"rain\" in yesterdaysHistoricalWeather.data.hourly[i] && yesterdaysHistoricalWeather.data.hourly[i].rain[\"1h\"] > 0)\r\n                    || (\"snow\" in yesterdaysHistoricalWeather.data.hourly[i] && yesterdaysHistoricalWeather.data.hourly[i].snow[\"1h\"] > 0));\r\n                hourlyWeatherForTwoDays.push({\r\n                    \"temperature\": Math.round(yesterdaysHistoricalWeather.data.hourly[i].temp),\r\n                    \"wind_deg\": yesterdaysHistoricalWeather.data.hourly[i].wind_deg,\r\n                    \"wind_speed\": Math.round(yesterdaysHistoricalWeather.data.hourly[i].wind_speed * 3.6),\r\n                    \"cloudiness\": yesterdaysHistoricalWeather.data.hourly[i].clouds,\r\n                    \"weather\": yesterdaysHistoricalWeather.data.hourly[i].weather,\r\n                    \"probabilityOfPrecipitation\": (wasRaining ? 100 : 0),\r\n                    \"rain_1h\": (\"rain\" in yesterdaysHistoricalWeather.data.hourly[i] ? yesterdaysHistoricalWeather.data.hourly[i].rain[\"1h\"].toFixed(1) : 0),\r\n                    \"snow_1h\": (\"snow\" in yesterdaysHistoricalWeather.data.hourly[i] ? yesterdaysHistoricalWeather.data.hourly[i].snow[\"1h\"].toFixed(1) : 0),\r\n                    \"timeUTC\": utcTimeFromUTCUnix(yesterdaysHistoricalWeather.data.hourly[i].dt),\r\n                    \"timeLocal\": utcTimeFromUTCUnix(yesterdaysHistoricalWeather.data.hourly[i].dt + currentWeather.data.timezone),\r\n                    \"dt\": yesterdaysHistoricalWeather.data.hourly[i].dt});\r\n            }\r\n        }\r\n\r\n        const hoursAlreadyFilled = hourlyWeatherForTwoDays.length;\r\n        const startIndexToday = hoursOfHistoricalDataAvailable - (hoursToFillWithHistoricalData - hoursAlreadyFilled);\r\n        for (let i = startIndexToday; i < hoursOfHistoricalDataAvailable; i++){\r\n            const wasRaining = ((\"rain\" in todaysHistoricalWeather.data.hourly[i] && todaysHistoricalWeather.data.hourly[i].rain[\"1h\"] > 0)\r\n                || (\"snow\" in todaysHistoricalWeather.data.hourly[i] && todaysHistoricalWeather.data.hourly[i].snow[\"1h\"] > 0));\r\n            hourlyWeatherForTwoDays.push({\r\n                \"temperature\": Math.round(todaysHistoricalWeather.data.hourly[i].temp),\r\n                \"wind_deg\": todaysHistoricalWeather.data.hourly[i].wind_deg,\r\n                \"wind_speed\": Math.round(todaysHistoricalWeather.data.hourly[i].wind_speed * 3.6),\r\n                \"cloudiness\": todaysHistoricalWeather.data.hourly[i].clouds,\r\n                \"weather\": todaysHistoricalWeather.data.hourly[i].weather,\r\n                \"probabilityOfPrecipitation\": (wasRaining ? 100 : 0),\r\n                \"rain_1h\": (\"rain\" in todaysHistoricalWeather.data.hourly[i] ? todaysHistoricalWeather.data.hourly[i].rain[\"1h\"].toFixed(1) : 0),\r\n                \"snow_1h\": (\"snow\" in todaysHistoricalWeather.data.hourly[i] ? todaysHistoricalWeather.data.hourly[i].snow[\"1h\"].toFixed(1) : 0),\r\n                \"timeUTC\": utcTimeFromUTCUnix(todaysHistoricalWeather.data.hourly[i].dt),\r\n                \"timeLocal\": utcTimeFromUTCUnix(todaysHistoricalWeather.data.hourly[i].dt + currentWeather.data.timezone),\r\n                \"dt\": todaysHistoricalWeather.data.hourly[i].dt});\r\n        }\r\n\r\n        const exclude = \"current,minutely,alerts\"\r\n        // Hourly forecast starts at previous full hour - e.g. for 11:08 at 11:00\r\n        const nextDaysForecast = await axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=${exclude}&appid=${process.env.REACT_APP_API_KEY}`);\r\n        const numberOfEntriesToFill = hoursInTwoDays - hourlyWeatherForTwoDays.length;\r\n        console.assert(numberOfEntriesToFill <= nextDaysForecast.data.hourly.length);\r\n        for (let i = 0; i < numberOfEntriesToFill; i++){\r\n            hourlyWeatherForTwoDays.push({\r\n                \"temperature\": Math.round(nextDaysForecast.data.hourly[i].temp),  // in °C\r\n                \"wind_deg\": nextDaysForecast.data.hourly[i].wind_deg,  // from 0 to 360 degrees\r\n                \"wind_speed\": Math.round(nextDaysForecast.data.hourly[i].wind_speed * 3.6),  // in km/h\r\n                \"cloudiness\": nextDaysForecast.data.hourly[i].clouds,  // in % from 0 to 100\r\n                \"weather\": nextDaysForecast.data.hourly[i].weather,  // data with key for icon\r\n                \"probabilityOfPrecipitation\": (\"pop\" in nextDaysForecast.data.hourly[i] ? (nextDaysForecast.data.hourly[i][\"pop\"] * 100).toFixed() : 0),  // in percent from 0 to 100\r\n                \"rain_1h\": (\"rain\" in nextDaysForecast.data.hourly[i] ? nextDaysForecast.data.hourly[i].rain[\"1h\"].toFixed(1) : 0),  // in mm\r\n                \"snow_1h\": (\"snow\" in nextDaysForecast.data.hourly[i] ? nextDaysForecast.data.hourly[i].snow[\"1h\"].toFixed(1) : 0),  // in mm\r\n                \"timeUTC\": utcTimeFromUTCUnix(nextDaysForecast.data.hourly[i].dt),\r\n                \"timeLocal\": utcTimeFromUTCUnix(nextDaysForecast.data.hourly[i].dt + currentWeather.data.timezone),\r\n                \"dt\": nextDaysForecast.data.hourly[i].dt});\r\n        }\r\n\r\n        // Workaround: recharts draws bars with positive and negative values into different directions.\r\n        //  I didn't find a way to change the behaviour to draw all bars into one direction - setting the bottom\r\n        //  value of the bars as its called in matplotlib. This workaround shifts all values into a range starting\r\n        //  from the value 1 if at least one element is negative. The shifted values as used for plotting while the\r\n        //  original values are used for the labels of the bars.\r\n        let startIndex = 0;\r\n        let endIndex = 23;\r\n        for (let dayId = 0; dayId < 2; dayId++) {\r\n            let roundedTemperatureArray = [];\r\n            for(let i = startIndex; i <= endIndex; i++) {\r\n                roundedTemperatureArray.push(hourlyWeatherForTwoDays[i][\"temperature\"]);\r\n            }\r\n\r\n            let lowestTemperature = Math.min(...roundedTemperatureArray);\r\n            let temperatureArrayForPlot = roundedTemperatureArray.map( function(value) {\r\n                return value - (lowestTemperature - 1);\r\n            } );\r\n\r\n            let indexForPlotData = 0;\r\n            for(let i = startIndex; i <= endIndex; i++) {\r\n                hourlyWeatherForTwoDays[i][\"temperatureForPlot\"] = temperatureArrayForPlot[indexForPlotData];\r\n                indexForPlotData++;\r\n            }\r\n\r\n            startIndex += 24;\r\n            endIndex += 24;\r\n        }\r\n\r\n        const weatherData = {\"hourly\": hourlyWeatherForTwoDays};\r\n\r\n        // Reconstruct the current hour of the requested city\r\n        const utcNow = Date.now();  // Use .now() because current time in data might be from previous hour\r\n        const nowInTimezone = (utcNow + (currentWeather.data.timezone * 1000));\r\n        const dateInTimezone = new Date(nowInTimezone);\r\n        const currentHour = dateInTimezone.getUTCHours();  // .getUTCHours() to not apply the timezone of the user\r\n        weatherData[\"currentHour\"] = currentHour;\r\n\r\n        // Save hours of sunrise and sunset for current and next day\r\n        weatherData[\"hoursOfSunrise\"] = [];\r\n        weatherData[\"hoursOfSunset\"] = [];\r\n        for (let dayId = 0; dayId < 2; dayId++) {\r\n            const sunriseInTimezone = new Date((nextDaysForecast.data.daily[dayId].sunrise + currentWeather.data.timezone) * 1000);\r\n            const hourOfSunrise = sunriseInTimezone.getUTCHours();\r\n            const sunsetInTimezone = new Date((nextDaysForecast.data.daily[dayId].sunset + currentWeather.data.timezone) * 1000);\r\n            const hourOfSunset = sunsetInTimezone.getUTCHours();\r\n            weatherData[\"hoursOfSunrise\"].push(hourOfSunrise);\r\n            weatherData[\"hoursOfSunset\"].push(hourOfSunset);\r\n        }\r\n\r\n        return Promise.resolve(weatherData);\r\n    } catch (error) {\r\n        console.log(\"Failed to fetch weather data within getWeatherData\");\r\n        console.log(error);\r\n        return Promise.reject(Error(error));\r\n    }\r\n}","import \"./app.scss\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {useCookies} from 'react-cookie';\r\nimport CitySearchBar from \"./components/citySearchBar/CitySearchBar\";\r\nimport WeatherForecastForADay from \"./components/weatherForecastForADay/WeatherForecastForADay\";\r\nimport WeatherForecastForAWeek from \"./components/weatherForecastForAWeek/WeatherForecastForAWeek\";\r\nimport {getWeatherData} from \"./data\"\r\nimport {MaxWindowInnerHeight, ScrollSnap2D} from \"./utils\"\r\n\r\nfunction App() {\r\n    // The maximal inner height of the window, being used as the minHeight of the App to prevent a resize of the\r\n    // components when the Android keyboard is opened - which leads to a smaller inner height.\r\n    const maxWindowInnerHeight = MaxWindowInnerHeight();\r\n\r\n    const [currentSlidePosition, handleTouchStart, scrollOnSwipe] = ScrollSnap2D(2, 3);\r\n\r\n    const [cookies, setCookie, removeCookie] = useCookies(['cityName']);\r\n\r\n    const [cityName, updateCityName] = useState(cookies.cityName ? cookies.cityName : \"\");\r\n    const [weatherData, updateWeatherData] = useState();\r\n    const triedToFetchData = useRef(false);\r\n\r\n    const reloadWeather = async (e) => {\r\n        e.preventDefault();\r\n        await fetchWeather();\r\n    };\r\n\r\n    /**\r\n     * Fetch weather forecast from OpenWeatherMap (OWM)\r\n     *\r\n     * If fetch is successful, the current city name is saved in the cookies, so the user doesn't need to specify\r\n     * it again on reload.\r\n     * Otherwise the city name entry in the cookies is removed and the forecast data is deleted to show the user\r\n     * that the forecast is not available.\r\n     */\r\n    const fetchWeather = async () => {\r\n        try {\r\n            triedToFetchData.current = true;\r\n\r\n            const localWeatherData = await getWeatherData(cityName);\r\n\r\n            setCookie('cityName', cityName, {path: '/', secure: true, sameSite: \"strict\", maxAge: 31536000});\r\n            updateWeatherData(localWeatherData);\r\n        } catch (error) {\r\n            console.log(\"Failed to fetch weather data\");\r\n            console.log(error);\r\n            removeCookie(\"cityName\", {path: '/', secure: true, sameSite: \"strict\", maxAge: 31536000});\r\n            updateWeatherData();\r\n        }\r\n    };\r\n\r\n    // Fetch weather on first render if city name is already defined in cookies\r\n    useEffect(() => {\r\n        if (cookies.cityName) {\r\n            fetchWeather();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"App\" style={{minHeight : `${maxWindowInnerHeight}px`}}>\r\n            <div className=\"websiteContent\">\r\n                <CitySearchBar cityName={cityName} updateCityName={updateCityName} reloadWeather={reloadWeather}/>\r\n                {weatherData === undefined ? (\r\n                    <div className=\"noData\">\r\n                        {triedToFetchData.current === false ? (\r\n                            <h1>Search for a city name.<br/>Get the weather forecast.</h1>\r\n                        ) : (\r\n                            <h1>Failed to get weather data.<br/>Try another city.</h1>\r\n                            )\r\n                        }\r\n                    </div>\r\n                ) : (\r\n                    <div\r\n                        className=\"sections\"\r\n                        onTouchStart={touchStartEvent => handleTouchStart(touchStartEvent)}\r\n                        onTouchMove={touchMoveEvent => scrollOnSwipe(touchMoveEvent)}\r\n                    >\r\n                        <div className=\"container\" style={{transform: `translateY(-${currentSlidePosition[1] * 100}%)`}}>\r\n                            <WeatherForecastForADay\r\n                                dayId={0}\r\n                                weatherData={weatherData.hourly.slice(0, 24)}\r\n                                currentHour={weatherData[\"currentHour\"]}\r\n                                hourOfSunrise={weatherData[\"hoursOfSunrise\"][0]}\r\n                                hourOfSunset={weatherData[\"hoursOfSunset\"][0]}\r\n                                slideID={currentSlidePosition[0]}\r\n                            />\r\n                        </div>\r\n                        <div className=\"container\" style={{transform: `translateY(${(1 - currentSlidePosition[1]) * 100}%)`}}>\r\n                            <WeatherForecastForADay\r\n                                dayId={1}\r\n                                weatherData={weatherData.hourly.slice(24, 48)}\r\n                                currentHour={weatherData[\"currentHour\"]}\r\n                                hourOfSunrise={weatherData[\"hoursOfSunrise\"][1]}\r\n                                hourOfSunset={weatherData[\"hoursOfSunset\"][1]}\r\n                                slideID={currentSlidePosition[0]}\r\n                            />\r\n                        </div>\r\n                        <div className=\"container\" style={{transform: `translateY(${(2 - currentSlidePosition[1]) * 100}%)`}}>\r\n                            <WeatherForecastForAWeek cityName={cookies.cityName} weatherData={weatherData}/>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\nimport 'semantic-ui-css/semantic.min.css';\nimport {CookiesProvider} from 'react-cookie';\n\nimport App from \"./App\";\n\nReactDOM.render(\n    <CookiesProvider>\n        <App/>\n    </CookiesProvider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}