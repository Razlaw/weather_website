{"version":3,"sources":["assets/magnifying_glass.svg","components/citySearchBar/CitySearchBar.jsx","components/hourOfDayListItem/HourOfDayListItem.jsx","components/plotForADay/PlotForADay.jsx","components/weatherForecastForADay/WeatherForecastForADay.jsx","components/weatherForecastForAWeek/WeatherForecastForAWeek.jsx","utils.jsx","data.jsx","WindowSize.jsx","App.jsx","index.js"],"names":["_g","_excluded","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgMagnifyingGlass","_ref","svgRef","title","titleId","props","id","width","height","viewBox","xmlns","ref","stroke","cx","cy","rx","ry","fill","strokeLinecap","strokeLinejoin","strokeWidth","d","ForwardRef","CitySearchBar","cityName","updateCityName","reloadWeather","className","onSubmit","onChange","e","value","placeholder","type","autoFocus","HourOfDayListItem","time","active","PlotForADay","currentHour","weatherData","dataKey","plotKey","unit","ResponsiveContainer","BarChart","layout","data","margin","top","left","right","bottom","XAxis","hide","domain","Bar","barSize","background","isAnimationActive","LabelList","position","formatter","entry","toFixed","map","index","Cell","radius","WeatherForecastForADay","dayToDisplay","useState","currentSlide","setCurrentSlide","touchStartPosition","useRef","touchEndPosition","scrollOnVerticalSwipe","swipeVectorX","current","swipeVectorY","isSwipingHorizontally","Math","abs","isSwipingRight","onTouchStart","touchStartEvent","targetTouches","clientX","clientY","onTouchMove","touchMoveEvent","onTouchEnd","onMouseDown","mouseDownEvent","preventDefault","onMouseMove","mouseMoveEvent","onMouseUp","Array","x","hourOfDay","style","transform","WeatherForecastForAWeek","href","utcTimeFromUTCUnix","unixUTCTimeInSeconds","dateUTC","Date","hoursUTC","getUTCHours","minutesUTC","getUTCMinutes","toString","secondsUTC","getUTCSeconds","getWeatherData","a","axios","get","process","currentWeather","lat","coord","lon","currentUnixTimeUTC","dt","currentUnixTimeInCity","timezone","todaysHistoricalWeather","hoursInTwoDays","hourlyWeatherForTwoDays","dateInCity","hoursToFillWithHistoricalData","hoursOfHistoricalDataAvailable","hourly","yesterdayUnixTimeUTC","yesterdaysHistoricalWeather","hoursToFillWithYesterdaysData","console","assert","startIndexYesterday","push","round","temp","wind_deg","wind_speed","clouds","weather","rain","snow","hoursAlreadyFilled","nextDaysForecast","numberOfEntriesToFill","startIndex","endIndex","dayId","roundedTemperatureArray","lowestTemperature","min","temperatureArrayForPlot","indexForPlotData","utcNow","now","nowInTimezone","dateInTimezone","Promise","resolve","log","reject","Error","getWindowDimensions","window","windowWidth","innerWidth","windowHeight","innerHeight","App","wDimensions","windowDimensions","setWindowDimensions","useEffect","handleResize","currentWindowDimensions","addEventListener","removeEventListener","useWindowDimensions","numberOfSlides","maxSlideId","max","currentSlideId","isAwaitingScroll","touchCurrentPosition","isSwipingVertically","isSwipingDown","VerticalScrollSnap","handleTouchStart","useCookies","cookies","setCookie","removeCookie","updateWeatherData","triedToFetchData","fetchWeather","localWeatherData","path","secure","sameSite","maxAge","minHeight","undefined","slice","ReactDOM","render","CookiesProvider","document","getElementById"],"mappings":"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","file":"static/js/main.685e074c.chunk.js","sourcesContent":["var _g;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgMagnifyingGlass(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    id: \"SVGRoot\",\n    width: \"16px\",\n    height: \"16px\",\n    viewBox: \"0 0 16 16\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _g || (_g = /*#__PURE__*/React.createElement(\"g\", {\n    stroke: \"#000\"\n  }, /*#__PURE__*/React.createElement(\"ellipse\", {\n    cx: 5.6727,\n    cy: 5.7476,\n    rx: 3.0967,\n    ry: 3.1013,\n    fill: \"none\",\n    strokeLinecap: \"square\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 1.7101\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m9.2387 9.2405 3.7161 3.7215\",\n    fill: \"none\",\n    strokeWidth: 1.6549\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m9.2387 10.481-1.2387-2.481 2.4774 1.2405z\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 0.46851\n  }))));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgMagnifyingGlass);\nexport default __webpack_public_path__ + \"static/media/magnifying_glass.7b20c50e.svg\";\nexport { ForwardRef as ReactComponent };","import \"./citySearchBar.scss\";\r\nimport {ReactComponent as MagnifyingGlassIcon} from '../../assets/magnifying_glass.svg';\r\n\r\nexport default function CitySearchBar({cityName, updateCityName, reloadWeather}) {\r\n    return (\r\n        <div className=\"citySearchBar\">\r\n            <form onSubmit={reloadWeather}>\r\n                <div className=\"formComponents\">\r\n                    <input\r\n                        onChange={(e) => updateCityName(e.target.value)}\r\n                        placeholder={cityName === \"\" ? \"City\" : cityName}\r\n                        type=\"text\"\r\n                        id=\"cityNameInput\"\r\n                        autoFocus\r\n                    />\r\n                    <button type=\"submit\">\r\n                        <MagnifyingGlassIcon className=\"magnifyingGlassIcon\"/>\r\n                    </button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    );\r\n}","import \"./hourOfDayListItem.scss\"\r\n\r\nexport default function HourOfDayListItem({time, active}) {\r\n    return (\r\n        <li\r\n            className={active ? \"hourOfDayListItem active\" : \"hourOfDayListItem\"}\r\n        >\r\n            {time}:00\r\n        </li>\r\n    );\r\n}","import \"./plotForADay.scss\";\r\nimport React from 'react';\r\nimport {\r\n    Cell,\r\n    Bar,\r\n    XAxis,\r\n    BarChart,\r\n    ResponsiveContainer,\r\n    LabelList\r\n} from 'recharts';\r\n\r\nexport default function PlotForADay({currentHour, weatherData, dataKey, plotKey, unit}) {\r\n\r\n    const renderLabel = function(entry) {\r\n        return (entry).toFixed(0) + unit;\r\n    }\r\n\r\n    return (\r\n        <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n            <BarChart layout=\"vertical\" width=\"100%\" height=\"100%\" data={weatherData} margin={{\r\n                top: 20,\r\n                left: 20,\r\n                right: 20,\r\n                bottom: 0\r\n            }}>\r\n                <XAxis\r\n                    type=\"number\"\r\n                    hide={true}\r\n                    domain={[0, \"dataMax + 1\"]}\r\n                />\r\n                {/*<CartesianGrid*/}\r\n                {/*    strokeDasharray=\"19 6\"*/}\r\n                {/*    strokeDashoffset={10}*/}\r\n                {/*    stroke={'#000'}*/}\r\n                {/*    width={20}*/}\r\n                {/*/>*/}\r\n                <Bar\r\n                    dataKey={dataKey}\r\n                    barSize={18}\r\n                    background={{ fill: 'rgb(255,255,255)' }}\r\n                    isAnimationActive={false}\r\n                >\r\n                    <LabelList\r\n                        dataKey={plotKey}\r\n                        position=\"right\"\r\n                        formatter={renderLabel}\r\n                    />\r\n                    {weatherData.map((entry, index) => (\r\n                        <Cell\r\n                            className={index === currentHour ? \"barCell active\" : \"barCell\"}\r\n                            fill={index === currentHour ? '#82ca9d' : 'rgb(136,132,216)'}\r\n                            height={18}\r\n                            stroke={'#000'}\r\n                            strokeWidth={0}\r\n                            radius={[0, 5, 5 ,0]}\r\n                            key={`cell-${index}`}\r\n                        />\r\n                    ))}\r\n                </Bar>\r\n            </BarChart>\r\n        </ResponsiveContainer>\r\n    );\r\n}\r\n","import \"./weatherForecastForADay.scss\";\r\nimport HourOfDayListItem from \"../hourOfDayListItem/HourOfDayListItem\";\r\nimport React, {useRef, useState} from \"react\";\r\nimport PlotForADay from \"../plotForADay/PlotForADay\";\r\n\r\nexport default function WeatherForecastForADay({dayToDisplay, weatherData, currentHour}) {\r\n    const [currentSlide, setCurrentSlide] = useState(0);\r\n\r\n    const touchStartPosition = useRef([0, 0]);\r\n    const touchEndPosition = useRef([0, 0]);\r\n\r\n    function setTouchStartPosition(e) {\r\n        touchStartPosition.current = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n        touchEndPosition.current = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n    }\r\n\r\n    function setMouseStartPosition(e) {\r\n        e.preventDefault();\r\n        touchStartPosition.current = [e.clientX, e.clientY];\r\n        touchEndPosition.current = [e.clientX, e.clientY];\r\n    }\r\n\r\n    function setTouchCurrentPosition(e) {\r\n        touchEndPosition.current = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n    }\r\n\r\n    function setMouseCurrentPosition(e) {\r\n        touchEndPosition.current = [e.clientX, e.clientY];\r\n    }\r\n\r\n    function scrollOnVerticalSwipe() {\r\n        const swipeVectorX = touchEndPosition.current[0] - touchStartPosition.current[0];\r\n        const swipeVectorY = touchEndPosition.current[1] - touchStartPosition.current[1];\r\n        const isSwipingHorizontally = Math.abs(swipeVectorX) > Math.abs(swipeVectorY);\r\n        const isSwipingRight = swipeVectorX > 50 && isSwipingHorizontally;\r\n        const isSwipingLeft = swipeVectorX < -50 && isSwipingHorizontally;\r\n\r\n        if (isSwipingLeft) {\r\n            setCurrentSlide(currentSlide < 3 - 1 ? currentSlide + 1 : 0);\r\n        }\r\n\r\n        if (isSwipingRight) {\r\n            setCurrentSlide(currentSlide > 0 ? currentSlide - 1 : 3 - 1)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className=\"weatherForecastForADay\"\r\n            onTouchStart={touchStartEvent => setTouchStartPosition(touchStartEvent)}\r\n            onTouchMove={touchMoveEvent => setTouchCurrentPosition(touchMoveEvent)}\r\n            onTouchEnd={() => scrollOnVerticalSwipe()}\r\n            onMouseDown={mouseDownEvent => setMouseStartPosition(mouseDownEvent)}\r\n            onMouseMove={mouseMoveEvent => setMouseCurrentPosition(mouseMoveEvent)}\r\n            onMouseUp={() => scrollOnVerticalSwipe()}\r\n        >\r\n            <div className=\"contentContainer\">\r\n                <div className=\"dayDisplay\">\r\n                    <h1>\r\n                        {dayToDisplay}\r\n                    </h1>\r\n                </div>\r\n                <div className=\"forecast\">\r\n                    <div className=\"hoursOfDay\">\r\n                        <ul>\r\n                            {[...Array(24)].map((x, hourOfDay) =>\r\n                                <HourOfDayListItem\r\n                                    key={hourOfDay}\r\n                                    time={hourOfDay}\r\n                                    active={currentHour === hourOfDay}\r\n                                />\r\n                            )}\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"forecastPlot\">\r\n                        <div className=\"plotContainer\">\r\n                            <div className=\"temperaturePlot\" style={{transform: `rotateY(${currentSlide * 0.25}turn)`}} >\r\n                                <PlotForADay\r\n                                    currentHour={currentHour}\r\n                                    weatherData={weatherData}\r\n                                    dataKey={\"temperatureForPlot\"}\r\n                                    plotKey={\"temperature\"}\r\n                                    unit={\"°C\"}/>\r\n                            </div>\r\n                            <div className=\"windPlot\" style={{transform: `rotateY(${(currentSlide-2) * 0.25}turn)`}}>\r\n                                <PlotForADay\r\n                                    currentHour={currentHour}\r\n                                    weatherData={weatherData}\r\n                                    dataKey={\"wind_speed\"}\r\n                                    plotKey={\"wind_speed\"}\r\n                                    unit={\"m/s\"}/>\r\n                            </div>\r\n                            <div className=\"rainPlot\" style={{transform: `rotateY(${(currentSlide-1) * 0.25}turn)`}}>\r\n                                <PlotForADay\r\n                                    currentHour={currentHour}\r\n                                    weatherData={weatherData}\r\n                                    dataKey={\"rain_1h\"}\r\n                                    plotKey={\"rain_1h\"}\r\n                                    unit={\"mm\"}/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import \"./weatherForecastForAWeek.scss\";\r\nimport React from \"react\";\r\n\r\nexport default function WeatherForecastForAWeek({cityName, weatherData}) {\r\n    return (\r\n        <div className=\"weatherForecastForAWeek\">\r\n            <div className=\"contentContainer\">\r\n                <h1>\r\n                    Forecast for a week\r\n                </h1>\r\n            </div>\r\n            <div className=\"footer\">\r\n                <span>\r\n                    The weather data displayed on this website is provided by\r\n                    <a href=\"https://openweathermap.org\"> OpenWeather (TM)</a> under the\r\n                    <a href=\"https://creativecommons.org/licenses/by-sa/4.0/\"> Creative Commons Attribution-ShareAlike 4.0 International licence (CC BY-SA 4.0)</a>.\r\n                    Data and database are open and licensed by <a href=\"https://opendatacommons.org/licenses/odbl/\"> Open Data Commons Open Database License (ODbL)</a>.\r\n                </span>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import {useRef, useState} from \"react\";\r\n\r\nexport function utcTimeFromUTCUnix(unixUTCTimeInSeconds) {\r\n    const dateUTC = new Date(unixUTCTimeInSeconds * 1000);\r\n    const hoursUTC = dateUTC.getUTCHours();\r\n    let minutesUTC = dateUTC.getUTCMinutes().toString();\r\n    minutesUTC = minutesUTC.length === 1 ? \"0\" + minutesUTC : minutesUTC;\r\n    let secondsUTC = dateUTC.getUTCSeconds().toString();\r\n    secondsUTC = secondsUTC.length === 1 ? \"0\" + secondsUTC : secondsUTC;\r\n\r\n    return hoursUTC + ':' + minutesUTC + ':' + secondsUTC;\r\n}\r\n\r\nexport function localTimeFromUTCUnix(unixUTCTimeInSeconds) {\r\n    const date = new Date(unixUTCTimeInSeconds * 1000);\r\n    const hours = date.getHours();\r\n    let minutes = date.getMinutes().toString();\r\n    minutes = minutes.length === 1 ? \"0\" + minutes : minutes;\r\n    let seconds = date.getSeconds().toString();\r\n    seconds = seconds.length === 1 ? \"0\" + seconds : seconds;\r\n\r\n    return hours + ':' + minutes + ':' + seconds;\r\n}\r\n\r\n/**\r\n * Provides the basic functionality for a vertical scroll snap for touch swipe scrolls.\r\n *\r\n * Maintains a state for the currentSlideId being updated on vertical touch scroll swipes in a range from zero\r\n * to numberOfSlides.\r\n *\r\n * Example usage within a react functional component:\r\n *\r\n * const [currentSlideId, handleTouchStart, scrollOnVerticalSwipe] = VerticalScrollSnap(2);\r\n *\r\n * return (\r\n *   <div className=\"slideContainer\"\r\n *     onTouchStart={touchStartEvent => handleTouchStart(touchStartEvent)}\r\n *     onTouchMove={touchMoveEvent => scrollOnVerticalSwipe(touchMoveEvent)}\r\n *   >\r\n *     <div className=\"slide\" style={{transform: `translateY(-${currentSlideId * 100}%)`}}>\r\n *       <h1>Content of first slide.</h1>\r\n *     </div>\r\n *     <div className=\"slide\" style={{transform: `translateY(${(1 - currentSlideId) * 100}%)`}}>\r\n *       <h1>Content of second slide.</h1>\r\n *     </div>\r\n *   </div>\r\n * );\r\n *\r\n * @param {number} numberOfSlides - The number of slides you want to scroll through.\r\n * @returns {Array} The current slide ID, a function to call onTouchStart, and a function to call on onTouchMove.\r\n */\r\nexport function VerticalScrollSnap(numberOfSlides) {\r\n    const minSlideId = 0;\r\n    const maxSlideId = Math.max(0, numberOfSlides - 1);\r\n    const [currentSlideId, setCurrentSlide] = useState(minSlideId);\r\n\r\n    const touchStartPosition = useRef([0, 0]);\r\n    const isAwaitingScroll = useRef(false);\r\n\r\n    /* Saves starting point of touch to check for a vertical scroll on swipe. */\r\n    function handleTouchStart(e) {\r\n        touchStartPosition.current = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n        isAwaitingScroll.current = true;\r\n    }\r\n\r\n    /**\r\n    * Checks for a vertical swipe and scrolls into according direction.\r\n    *\r\n    * isAwaitingScroll is used to block further scrolling if swipe continues longer than scroll animation.\r\n    */\r\n    function scrollOnVerticalSwipe(e) {\r\n        if (isAwaitingScroll.current) {\r\n            const touchCurrentPosition = [e.targetTouches[0].clientX, e.targetTouches[0].clientY];\r\n            const swipeVectorX = touchCurrentPosition[0] - touchStartPosition.current[0];\r\n            const swipeVectorY = touchCurrentPosition[1] - touchStartPosition.current[1];\r\n            const isSwipingVertically = Math.abs(swipeVectorX) < Math.abs(swipeVectorY);\r\n            const isSwipingDown = swipeVectorY > 0 && isSwipingVertically;\r\n            const isSwipingUp = swipeVectorY < 0 && isSwipingVertically;\r\n\r\n            if (isSwipingUp) {\r\n                setCurrentSlide(currentSlideId < maxSlideId ? currentSlideId + 1 : currentSlideId);\r\n                isAwaitingScroll.current = false;\r\n            }\r\n\r\n            if (isSwipingDown) {\r\n                setCurrentSlide(currentSlideId > minSlideId ? currentSlideId - 1 : currentSlideId)\r\n                isAwaitingScroll.current = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    return [currentSlideId, handleTouchStart, scrollOnVerticalSwipe];\r\n}","import axios from \"axios\";\r\nimport {utcTimeFromUTCUnix} from \"./utils\"\r\n\r\nexport const getWeatherData = async (cityName) => {\r\n    try {\r\n        // Since OWM one call api accepts latitude and longitude coordinates only, we first fetch the current\r\n        // weather - containing the coordinates - using the city name and fetch the forecast using the coordinates.\r\n        const currentWeather = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${cityName}&appid=${process.env.REACT_APP_API_KEY}`);\r\n        const lat = currentWeather.data.coord.lat;\r\n        const lon = currentWeather.data.coord.lon;\r\n        const currentUnixTimeUTC = currentWeather.data.dt;\r\n        const currentUnixTimeInCity = currentWeather.data.dt + currentWeather.data.timezone;\r\n\r\n        // Historical Data up to the last full hour starting from 00:00 going to and including 11:00 for example at 11:08\r\n        const todaysHistoricalWeather = await axios.get(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${currentUnixTimeUTC}&units=metric&appid=${process.env.REACT_APP_API_KEY}`);\r\n        // console.log(\"todaysHistoricalWeather\");\r\n        // console.log(todaysHistoricalWeather);\r\n\r\n        const hoursInTwoDays = 48;\r\n        let hourlyWeatherForTwoDays = [];\r\n\r\n        const dateInCity = new Date(currentUnixTimeInCity * 1000);\r\n        const hoursToFillWithHistoricalData = dateInCity.getUTCHours();\r\n        // Last entry is not used because it corresponds to the same hour as the first entry of the forecast,\r\n        // which is more precise/already updated\r\n        const hoursOfHistoricalDataAvailable = todaysHistoricalWeather.data.hourly.length - 1;\r\n        if (hoursOfHistoricalDataAvailable < hoursToFillWithHistoricalData){\r\n            const yesterdayUnixTimeUTC = currentUnixTimeUTC - 86400;\r\n            const yesterdaysHistoricalWeather = await axios.get(`https://api.openweathermap.org/data/2.5/onecall/timemachine?lat=${lat}&lon=${lon}&dt=${yesterdayUnixTimeUTC}&units=metric&appid=${process.env.REACT_APP_API_KEY}`);\r\n\r\n            const hoursToFillWithYesterdaysData = hoursToFillWithHistoricalData - hoursOfHistoricalDataAvailable;\r\n            console.assert(hoursToFillWithYesterdaysData <= yesterdaysHistoricalWeather.data.hourly.length);\r\n            const startIndexYesterday = yesterdaysHistoricalWeather.data.hourly.length - hoursToFillWithYesterdaysData;\r\n            for (let i = startIndexYesterday; i < yesterdaysHistoricalWeather.data.hourly.length; i++){\r\n                hourlyWeatherForTwoDays.push({\r\n                    \"temperature\": Math.round(yesterdaysHistoricalWeather.data.hourly[i].temp),\r\n                    \"wind_deg\": yesterdaysHistoricalWeather.data.hourly[i].wind_deg,\r\n                    \"wind_speed\": Math.round(yesterdaysHistoricalWeather.data.hourly[i].wind_speed),\r\n                    \"cloudiness\": yesterdaysHistoricalWeather.data.hourly[i].clouds,\r\n                    \"weather\": yesterdaysHistoricalWeather.data.hourly[i].weather,\r\n                    \"probabilityOfPrecipitation\": 0,\r\n                    \"rain_1h\": (\"rain\" in yesterdaysHistoricalWeather.data.hourly[i] ? Math.round(yesterdaysHistoricalWeather.data.hourly[i].rain[\"1h\"]) : 0),\r\n                    \"snow_1h\": (\"snow\" in yesterdaysHistoricalWeather.data.hourly[i] ? Math.round(yesterdaysHistoricalWeather.data.hourly[i].snow[\"1h\"]) : 0),\r\n                    \"timeUTC\": utcTimeFromUTCUnix(yesterdaysHistoricalWeather.data.hourly[i].dt),\r\n                    \"timeLocal\": utcTimeFromUTCUnix(yesterdaysHistoricalWeather.data.hourly[i].dt + currentWeather.data.timezone),\r\n                    \"dt\": yesterdaysHistoricalWeather.data.hourly[i].dt});\r\n            }\r\n        }\r\n\r\n        const hoursAlreadyFilled = hourlyWeatherForTwoDays.length;\r\n        const startIndexToday = hoursOfHistoricalDataAvailable - (hoursToFillWithHistoricalData - hoursAlreadyFilled);\r\n        for (let i = startIndexToday; i < hoursOfHistoricalDataAvailable; i++){\r\n            hourlyWeatherForTwoDays.push({\r\n                \"temperature\": Math.round(todaysHistoricalWeather.data.hourly[i].temp),\r\n                \"wind_deg\": todaysHistoricalWeather.data.hourly[i].wind_deg,\r\n                \"wind_speed\": Math.round(todaysHistoricalWeather.data.hourly[i].wind_speed),\r\n                \"cloudiness\": todaysHistoricalWeather.data.hourly[i].clouds,\r\n                \"weather\": todaysHistoricalWeather.data.hourly[i].weather,\r\n                \"probabilityOfPrecipitation\": 0,\r\n                \"rain_1h\": (\"rain\" in todaysHistoricalWeather.data.hourly[i] ? Math.round(todaysHistoricalWeather.data.hourly[i].rain[\"1h\"]) : 0),\r\n                \"snow_1h\": (\"snow\" in todaysHistoricalWeather.data.hourly[i] ? Math.round(todaysHistoricalWeather.data.hourly[i].snow[\"1h\"]) : 0),\r\n                \"timeUTC\": utcTimeFromUTCUnix(todaysHistoricalWeather.data.hourly[i].dt),\r\n                \"timeLocal\": utcTimeFromUTCUnix(todaysHistoricalWeather.data.hourly[i].dt + currentWeather.data.timezone),\r\n                \"dt\": todaysHistoricalWeather.data.hourly[i].dt});\r\n        }\r\n\r\n        const exclude = \"current,minutely,alerts\"\r\n        // Hourly forecast starts at previous full hour - e.g. for 11:08 at 11:00\r\n        const nextDaysForecast = await axios.get(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&units=metric&exclude=${exclude}&appid=${process.env.REACT_APP_API_KEY}`);\r\n        // console.log(\"nextDaysForecast\");\r\n        // console.log(nextDaysForecast);\r\n\r\n        const numberOfEntriesToFill = hoursInTwoDays - hourlyWeatherForTwoDays.length;\r\n        console.assert(numberOfEntriesToFill <= nextDaysForecast.data.hourly.length);\r\n        for (let i = 0; i < numberOfEntriesToFill; i++){\r\n            hourlyWeatherForTwoDays.push({\r\n                \"temperature\": Math.round(nextDaysForecast.data.hourly[i].temp),  // in °C\r\n                \"wind_deg\": nextDaysForecast.data.hourly[i].wind_deg,  // from 0 to 360 degrees\r\n                \"wind_speed\": Math.round(nextDaysForecast.data.hourly[i].wind_speed),  // in m/s\r\n                \"cloudiness\": nextDaysForecast.data.hourly[i].clouds,  // in % from 0 to 100\r\n                \"weather\": nextDaysForecast.data.hourly[i].weather,  // data with key for icon\r\n                \"probabilityOfPrecipitation\": (\"pop\" in nextDaysForecast.data.hourly[i] ? nextDaysForecast.data.hourly[i][\"pop\"] : 0),  // in percent from 0.0 to 1.0\r\n                \"rain_1h\": (\"rain\" in nextDaysForecast.data.hourly[i] ? Math.round(nextDaysForecast.data.hourly[i].rain[\"1h\"]) : 0),  // in mm\r\n                \"snow_1h\": (\"snow\" in nextDaysForecast.data.hourly[i] ? Math.round(nextDaysForecast.data.hourly[i].snow[\"1h\"]) : 0),  // in mm\r\n                \"timeUTC\": utcTimeFromUTCUnix(nextDaysForecast.data.hourly[i].dt),\r\n                \"timeLocal\": utcTimeFromUTCUnix(nextDaysForecast.data.hourly[i].dt + currentWeather.data.timezone),\r\n                \"dt\": nextDaysForecast.data.hourly[i].dt});\r\n        }\r\n\r\n        // console.log(\"hourlyWeatherForTwoDays \", hourlyWeatherForTwoDays);\r\n\r\n        // Workaround: recharts draws bars with positive and negative values into different directions.\r\n        //  I didn't find a way to change the behaviour to draw all bars into one direction - setting the bottom\r\n        //  value of the bars as its called in matplotlib. This workaround shifts all values into a range starting\r\n        //  from the value 1 if at least one element is negative. The shifted values as used for plotting while the\r\n        //  original values are used for the labels of the bars.\r\n        let startIndex = 0;\r\n        let endIndex = 23;\r\n        for (let dayId = 0; dayId < 2; dayId++) {\r\n            let roundedTemperatureArray = [];\r\n            for(let i = startIndex; i <= endIndex; i++) {\r\n                roundedTemperatureArray.push(hourlyWeatherForTwoDays[i][\"temperature\"]);\r\n            }\r\n\r\n            let lowestTemperature = Math.min(...roundedTemperatureArray);\r\n            let temperatureArrayForPlot = roundedTemperatureArray.map( function(value) {\r\n                return value - (lowestTemperature - 1);\r\n            } );\r\n\r\n            let indexForPlotData = 0;\r\n            for(let i = startIndex; i <= endIndex; i++) {\r\n                hourlyWeatherForTwoDays[i][\"temperatureForPlot\"] = temperatureArrayForPlot[indexForPlotData];\r\n                indexForPlotData++;\r\n            }\r\n\r\n            startIndex += 24;\r\n            endIndex += 24;\r\n        }\r\n\r\n        const weatherData = {\"hourly\": hourlyWeatherForTwoDays};\r\n\r\n        // Reconstruct the current hour of the requested city\r\n        const utcNow = Date.now();  // Use .now() because current time in data might be from previous hour\r\n        const nowInTimezone = (utcNow + (currentWeather.data.timezone * 1000));\r\n        const dateInTimezone = new Date(nowInTimezone);\r\n        const currentHour = dateInTimezone.getUTCHours();  // .getUTCHours() to not apply the timezone of the user\r\n        weatherData[\"currentHour\"] = currentHour;\r\n\r\n        return Promise.resolve(weatherData);\r\n    } catch (error) {\r\n        console.log(\"Failed to fetch weather data within getWeatherData\");\r\n        console.log(error);\r\n        return Promise.reject(Error(error));\r\n    }\r\n}","import { useState, useEffect } from 'react';\r\n\r\nfunction getWindowDimensions() {\r\n    const { innerWidth: width, innerHeight: height } = window;\r\n    return {\r\n        windowWidth: width,\r\n        windowHeight: height\r\n    };\r\n}\r\n\r\nexport default function useWindowDimensions() {\r\n    const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n    useEffect(() => {\r\n        function handleResize() {\r\n            const currentWindowDimensions = getWindowDimensions();\r\n            // console.log(\"currentWindowDimensions is \", currentWindowDimensions);\r\n            // console.log(\"windowDimensions        is \", windowDimensions);\r\n            if(currentWindowDimensions.windowHeight > windowDimensions.windowHeight) {\r\n                // console.log(\"Setting windowDimensions to new value\");\r\n                setWindowDimensions(currentWindowDimensions);\r\n            }\r\n        }\r\n\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, );\r\n\r\n    return windowDimensions;\r\n}","import \"./app.scss\";\r\nimport React, {useEffect, useRef, useState} from \"react\";\r\nimport {useCookies} from 'react-cookie';\r\nimport CitySearchBar from \"./components/citySearchBar/CitySearchBar\";\r\nimport WeatherForecastForADay from \"./components/weatherForecastForADay/WeatherForecastForADay\";\r\nimport WeatherForecastForAWeek from \"./components/weatherForecastForAWeek/WeatherForecastForAWeek\";\r\nimport {getWeatherData} from \"./data\"\r\nimport {VerticalScrollSnap} from \"./utils\"\r\nimport useWindowDimensions from \"./WindowSize\"\r\n\r\nfunction App() {\r\n    const wDimensions = useWindowDimensions();\r\n\r\n    const [currentSlideId, handleTouchStart, scrollOnVerticalSwipe] = VerticalScrollSnap(3);\r\n\r\n    const [cookies, setCookie, removeCookie] = useCookies(['cityName']);\r\n\r\n    const [cityName, updateCityName] = useState(cookies.cityName ? cookies.cityName : \"\");\r\n    const [weatherData, updateWeatherData] = useState();\r\n    const triedToFetchData = useRef(false);\r\n\r\n    // TODO: save innerHeight update to get max innerhewight and use to set inline style for outer container\r\n    // window.innerheight is already displayed on startup screen\r\n\r\n    const reloadWeather = async (e) => {\r\n        e.preventDefault();\r\n        await fetchWeather();\r\n    };\r\n\r\n    /**\r\n     * Fetch weather forecast from OpenWeatherMap (OWM)\r\n     *\r\n     * If fetch is successful, the current city name is saved in the cookies, so the user doesn't need to specify\r\n     * it again on reload.\r\n     * Otherwise the city name entry in the cookies is removed and the forecast data is deleted to show the user\r\n     * that the forecast is not available.\r\n     */\r\n    const fetchWeather = async () => {\r\n        try {\r\n            triedToFetchData.current = true;\r\n\r\n            const localWeatherData = await getWeatherData(cityName);\r\n\r\n            setCookie('cityName', cityName, {path: '/', secure: true, sameSite: \"strict\", maxAge: 31536000});\r\n            updateWeatherData(localWeatherData);\r\n        } catch (error) {\r\n            console.log(\"Failed to fetch weather data\");\r\n            console.log(error);\r\n            removeCookie(\"cityName\", {path: '/', secure: true, sameSite: \"strict\", maxAge: 31536000});\r\n            updateWeatherData();\r\n        }\r\n    };\r\n\r\n    // Fetch weather on first render if city name is already defined in cookies\r\n    useEffect(() => {\r\n        if (cookies.cityName) {\r\n            fetchWeather();\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"App\" style={{minHeight : `${wDimensions.windowHeight}px`}}>\r\n            <div className=\"websiteContent\">\r\n                <CitySearchBar cityName={cityName} updateCityName={updateCityName} reloadWeather={reloadWeather}/>\r\n                {weatherData === undefined ? (\r\n                    <div className=\"noData\">\r\n                        {triedToFetchData.current === false ? (\r\n                            <h1>window innerHeight is {window.innerHeight}<br/>max height is {wDimensions.windowHeight}<br/>Search for a city name.<br/>Get the weather forecast.</h1>\r\n                        ) : (\r\n                            <h1>Failed to get weather data.<br/>Try another city.</h1>\r\n                            )\r\n                        }\r\n                    </div>\r\n                ) : (\r\n                    <div\r\n                        className=\"sections\"\r\n                        onTouchStart={touchStartEvent => handleTouchStart(touchStartEvent)}\r\n                        onTouchMove={touchMoveEvent => scrollOnVerticalSwipe(touchMoveEvent)}\r\n                    >\r\n                        <div className=\"container\" style={{transform: `translateY(-${currentSlideId * 100}%)`}}>\r\n                            <WeatherForecastForADay\r\n                                dayToDisplay=\"Today\"\r\n                                weatherData={weatherData.hourly.slice(0, 24)}\r\n                                currentHour={weatherData[\"currentHour\"]}\r\n                            />\r\n                        </div>\r\n                        <div className=\"container\" style={{transform: `translateY(${(1 - currentSlideId) * 100}%)`}}>\r\n                            <WeatherForecastForADay\r\n                                dayToDisplay=\"Tomorrow\"\r\n                                weatherData={weatherData.hourly.slice(24, 48)}\r\n                                currentHour={weatherData[\"currentHour\"]}\r\n                            />\r\n                        </div>\r\n                        <div className=\"container\" style={{transform: `translateY(${(2 - currentSlideId) * 100}%)`}}>\r\n                            <WeatherForecastForAWeek cityName={cookies.cityName} weatherData={weatherData}/>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from \"react-dom\";\nimport 'semantic-ui-css/semantic.min.css';\nimport {CookiesProvider} from 'react-cookie';\n\nimport App from \"./App\";\n\nReactDOM.render(\n    <CookiesProvider>\n        <App/>\n    </CookiesProvider>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}